[[{"i":"selamat-datang","l":"Selamat Datang! \uD83C\uDF89","p":["Selamat datang di Praktikum Pemrograman Lanjut dengan Python! Di sini, kalian akan menemukan berbagai materi praktikum dan sumber daya yang dirancang untuk membantu kalian menguasai Python dengan cara yang menyenangkan dan efektif.","\"The only way to learn a new programming language is by writing programs in it. — Dennis Ritchie\"","Itu sebabnya, di sini kamu akan menemukan berbagai tantangan dan latihan yang dirancang untuk membantumu menulis kode dan memahami konsep dengan lebih baik. Jangan ragu untuk menjelajahi semua materi dan mencoba hal-hal baru. Ingat, proses belajar adalah perjalanan yang penuh petualangan!"]},{"i":"tips--trik","l":"Tips & Trik","p":["Belajar Python itu seru, apalagi kalau kamu tahu beberapa trik jitu. Yuk, simak beberapa tips yang bisa bikin proses belajar kamu jadi lebih mudah dan menyenangkan!"]},{"l":"Mulai dari Dasar-dasar","p":["Pahami Sintaks Dasar: Sebelum melangkah jauh, pastikan kamu tahu dasar-dasarnya dulu. Seperti variabel, tipe data, dan operator. Ini penting banget buat membangun fondasi yang kuat.","Gunakan Platform Interaktif: Platform seperti Codecademy atau Learn Python the Hard Way bisa bantu kamu belajar dengan cara yang interaktif dan fun!"]},{"i":"latihan-latihan-latihan","l":"Latihan, Latihan, Latihan!","p":["Coding Setiap Hari: Cobalah untuk nulis kode setiap hari. Gak perlu lama, yang penting konsisten. Semakin sering kamu berlatih, semakin jago kamu!","Proyek Kecil: Mulai dengan proyek-proyek kecil, seperti bikin kalkulator atau game sederhana. Ini bakal bikin kamu lebih paham dan merasa lebih siap!"]},{"l":"Manfaatkan Dokumentasi dan Referensi","p":["Baca Dokumentasi Resmi: Dokumen resmi Python ( docs.python.org) adalah teman baik kamu. Selalu bisa diandalkan kalau kamu bingung.","Buku dan Tutorial: Buku seperti \"Automate the Boring Stuff with Python\" atau video tutorial di YouTube bisa jadi panduan yang jelas dan terstruktur."]},{"l":"Belajar dari Kode Orang Lain","p":["Baca Kode Open Source: Cek proyek open source di GitHub untuk melihat cara orang lain nulis kode. Ini bisa ngasih kamu ide baru dan trik-trik keren.","Gabung Komunitas: Bergabung dengan forum atau komunitas Python seperti Stack Overflow atau Reddit bisa bikin kamu dapat tips dan bantuan dari sesama pengembang."]},{"l":"Gunakan Alat Bantu","p":["Pilih IDE yang Tepat: Gunakan IDE seperti PyCharm atau editor seperti Visual Studio Code. Ini bakal bikin coding jadi lebih gampang.","Linting dan Format Kode: Gunakan alat seperti pylint atau black untuk menjaga kode tetap rapi dan sesuai standar."]},{"l":"Eksplorasi Konsep Lanjutan","p":["Pelajari Data Structures dan Algorithms: Mengerti struktur data seperti list, tuple, set, dan dictionary, serta algoritma dasar bakal bikin kamu lebih mahir dalam menyelesaikan masalah.","Coba Framework dan Library: Pelajari framework seperti Flask atau Django untuk pengembangan web, dan library seperti NumPy dan Pandas untuk analisis data."]},{"l":"Debugging dan Testing","p":["Gunakan Debugger: Alat debugging di IDE bisa bantu kamu menemukan dan memperbaiki kesalahan dengan lebih mudah.","Tulis Tes Unit: Dengan menulis tes unit menggunakan pytest, kamu bisa memastikan kode kamu bekerja dengan baik dan menghindari bug."]},{"l":"Selalu Terupdate","p":["Ikuti Berita Terbaru: Teknologi berubah cepat. Ikuti berita dan perkembangan terbaru di Python untuk tetap up-to-date dengan fitur dan alat terbaru.","Terus Belajar: Jangan berhenti belajar! Selalu cari cara untuk meningkatkan keterampilan kamu dan coba teknik baru yang menarik."]},{"l":"Gunakan Chatbot AI sebagai Bantuan","p":["Tanya Apa Saja: Bingung dengan konsep atau butuh penjelasan tambahan? Tanyakan saja ke ChatGPT! Dia bisa membantu menjelaskan konsep, memberikan contoh kode, dan memecahkan masalah.","Kode dan Debug: Jika kamu mengalami masalah dengan kode atau butuh bantuan debugging, kirimkan kode kamu dan AI akan bantu cari solusinya.","Sumber Daya dan Rekomendasi: Butuh rekomendasi buku, tutorial, atau alat bantu? AI bisa merekomendasikan sumber daya yang sesuai dengan kebutuhanmu.","Semoga tips ini membantu kamu dalam belajar Python! Selamat coding dan jangan lupa bersenang-senang! \uD83C\uDF89"]},{"l":"Sumber Daya Tambahan","p":["Dokumentasi Resmi Python: Referensi lengkap dan otoritatif.","Forum Diskusi Python: Bergabunglah dengan komunitas Python untuk bertanya dan berbagi pengetahuan.","Happy Coding! ✨"]}],[{"l":"Pengantar Python"},{"l":"Pengenalan Pemrograman","p":["Pemrograman ( programming) ibarat memberikan instruksi atau perintah kepada komputer untuk melakukan tugas tertentu. Bayangkan komputer itu seperti asisten yang sangat pintar, tapi dia hanya bisa melakukan apa yang kamu perintahkan secara tepat. Misalnya, jika kamu ingin asistenmu menghitung nilai matematika atau menganalisis data, kamu harus memberitahunya dengan jelas apa yang harus dilakukan.","Ilustrasi Pemrograman: Komputer bertindak seperti asisten yang menjalankan instruksi yang diberikan oleh programmer","Di dunia matematika, pemrograman sangat berguna. Kamu bisa menggunakan kode untuk melakukan perhitungan rumit, menganalisis data besar, atau bahkan memvisualisasikan grafik. Dengan kata lain, pemrograman bisa membantu kamu mengerjakan tugas-tugas matematika yang sulit dengan lebih cepat dan efisien."]},{"l":"Pengenalan Python","p":["Python adalah salah satu bahasa pemrograman yang sangat populer dan mudah dipelajari, terutama untuk pemula. Dengan sintaks yang sederhana dan kemampuan untuk menangani berbagai tugas, Python adalah pilihan yang tepat untuk mulai belajar pemrograman."]},{"i":"kenapa-python","l":"Kenapa Python?","p":["Sederhana dan Mudah Dipahami, seperti menulis kalimat dalam bahasa sehari-hari.","Kuat dan serbaguna, bisa digunakan untuk banyak hal, mulai dari perhitungan matematika hingga pembuatan AI."]},{"i":"tipe-data-variabel-dan-operator","l":"Tipe Data, Variabel dan Operator"},{"l":"Tipe Data","p":["Sebelum kita membahas lebih jauh tentang variabel, mari kita pahami terlebih dahulu apa itu tipe data. Tipe data adalah jenis data yang bisa kamu simpan dalam variabel. Di Python, ada beberapa tipe data dasar yang sering digunakan."]},{"i":"tipe-data-dasar-di-python","l":"Tipe Data Dasar di Python:","p":["Integer ( int): Bilangan bulat tanpa desimal. Misalnya, 10, -3, 0.","Float ( float): Bilangan desimal. Misalnya, 3.14, -0.5, 2.0.","String ( str): Teks atau rangkaian karakter. Misalnya, Python, 123, 'Hello World!'.","Boolean ( bool): Nilai benar atau salah, yaitu True atau False."]},{"l":"Variabel","p":["Bayangkan variabel itu seperti kotak penyimpanan yang bisa kamu beri nama. Di dalam kotak ini, kamu bisa menyimpan berbagai jenis data, seperti angka atau teks. Tipe data menentukan jenis informasi yang bisa disimpan dalam variabel tersebut."]},{"i":"contoh","l":"Contoh:","p":["Penjelasan:","x, y, dan name adalah nama kotak (variabel) yang kita gunakan untuk menyimpan data.","x menyimpan angka bulat, yang disebut sebagai integer.","y menyimpan angka desimal, yang disebut sebagai float.","name menyimpan teks, yang disebut sebagai string.","is_active menyimpan nilai benar atau salah, yang disebut sebagai boolean.","Kamu bisa menggunakan nama yang sesuai dengan isi kotaknya. Misalnya, jika kamu ingin menyimpan nama seseorang, menggunakan nama variabel seperti name akan lebih masuk akal daripada menggunakan nama yang tidak relevan seperti x atau y."]},{"l":"Operator","p":["Operator adalah simbol yang digunakan untuk melakukan operasi pada data dalam variabel. Misalnya, jika kamu ingin menjumlahkan dua angka atau membandingkan dua nilai, kamu akan menggunakan operator."]},{"i":"contoh-1","l":"Contoh:","p":["Penjelasan:","Operator aritmatika melakukan operasi matematika dasar.","Operator pembanding digunakan untuk membandingkan dua nilai.","Operator logika digunakan untuk menggabungkan atau membalik kondisi."]},{"i":"kondisi-if-else","l":"Kondisi (If-Else)","p":["Dengan kondisi, kamu bisa membuat komputer membuat keputusan. Misalnya, kamu bisa memberi tahu komputer untuk melakukan sesuatu jika suatu kondisi tertentu terpenuhi."]},{"l":"Struktur If-Else"},{"i":"contoh-2","l":"Contoh:","p":["Penjelasan:","if digunakan untuk mengecek apakah suatu kondisi benar. Jika ya, maka blok kode di bawahnya akan dijalankan.","elif(else if) digunakan jika kondisi pertama tidak terpenuhi dan kamu ingin mengecek kondisi lainnya.","else digunakan untuk kondisi di luar if dan elif."]},{"i":"loop-pengulangan","l":"Loop (Pengulangan)","p":["Loop memungkinkan kamu untuk menjalankan bagian kode berulang kali. Misalnya, jika kamu ingin menghitung total dari beberapa angka, kamu bisa menggunakan loop."]},{"l":"For Loop","p":["For loop digunakan untuk mengulangi blok kode untuk setiap item dalam urutan."]},{"i":"contoh-3","l":"Contoh:","p":["Penjelasan:","range(1, 6) menghasilkan urutan angka dari 1 hingga 5.","for loop mengulangi blok kode untuk setiap angka dalam urutan."]},{"l":"While Loop","p":["While loop digunakan untuk mengulangi blok kode selama kondisi tertentu benar."]},{"i":"contoh-4","l":"Contoh:","p":["Penjelasan:","while loop terus mengulangi blok kode selama n lebih besar dari 0.","Faktorial dihitung dengan mengalikan faktorial dengan n dan kemudian mengurangi n hingga mencapai 0."]},{"l":"Fungsi","p":["Fungsi adalah cara untuk mengorganisir kode kamu dengan membuat blok kode yang bisa dipanggil berkali-kali. Ini membantu untuk membuat kode lebih bersih dan terstruktur."]},{"l":"Mendefinisikan dan Memanggil Fungsi"},{"i":"contoh-5","l":"Contoh:","p":["Penjelasan:","Fungsi kuadrat menerima satu parameter x dan mengembalikan x kuadrat.","Kamu bisa memanggil fungsi ini dengan memberikan nilai untuk x dan mendapatkan hasilnya."]},{"l":"Fungsi dengan Beberapa Parameter"},{"i":"contoh-6","l":"Contoh:","p":["Penjelasan:","Fungsi luas_segitiga menerima dua parameter, alas dan tinggi, dan mengembalikan luas segitiga.","Kamu bisa memanggil fungsi ini dengan memberikan nilai untuk alas dan tinggi."]},{"l":"Komentar","p":["Komentar adalah catatan atau penjelasan dalam kode yang tidak dijalankan oleh komputer. Mereka berguna untuk menulis informasi atau catatan tentang kode agar lebih mudah dipahami oleh orang lain (atau diri sendiri di masa depan)."]},{"i":"kenapa-komentar-penting","l":"Kenapa Komentar Penting?","p":["Menjelaskan Kode: Komentar bisa menjelaskan apa yang dilakukan oleh kode atau mengapa kode tersebut ditulis dengan cara tertentu.","Memudahkan Pemeliharaan: Ketika kamu atau orang lain kembali ke kode setelah beberapa waktu, komentar bisa membantu memahami apa yang sudah dilakukan tanpa harus membaca setiap baris kode dengan teliti."]},{"l":"Cara Menulis Komentar di Python","p":["Di Python, ada dua cara untuk menulis komentar:","Komentar Satu Baris: Komentar ini dimulai dengan tanda #. Semua yang ada setelah # pada baris tersebut dianggap sebagai komentar dan tidak akan dieksekusi oleh Python.","Komentar Beberapa Baris: Jika kamu perlu menulis komentar yang lebih panjang atau beberapa baris komentar, kamu bisa menggunakan tanda kutip tiga ( atau ''') untuk membuat komentar multi-baris.","Penjelasan:","Komentar ini dimulai dengan tiga tanda kutip ganda () dan diakhiri dengan tiga tanda kutip ganda. Python akan mengabaikan semua teks di antara tanda kutip ini."]},{"l":"Tips untuk Menulis Komentar","p":["Jangan berlebihan. Jangan terlalu banyak berkomentar. Jika kode sudah jelas, komentar yang berlebihan malah bisa membuat bingung.","Jelaskan logika, bukan sintaks. Fokuskan komentar pada logika dan alasan di balik kode, bukan hanya menjelaskan sintaks dasar yang sudah jelas."]}],[{"l":"Contoh Kode"}],[{"i":"pemrograman-berorientasi-objek-oop--class-dan-object","l":"Pemrograman Berorientasi Objek (OOP) – Class dan Object"},{"l":"Pengantar OOP","p":["Halo teman-teman! Selamat datang di materi Pemrograman Berorientasi Objek atau dalam bahasa Inggris disebut dengan Object Oriented Programming (OOP). Nah, kalian mungkin bertanya, OOP itu apa sih? OOP adalah cara kita memikirkan program sebagai kumpulan objek yang saling berinteraksi. Berbeda dengan pemrograman prosedural yang cenderung fokus pada rangkaian langkah atau instruksi, OOP lebih fokus pada objek-objek yang \"hidup\" dalam program kita.","Di sini kita akan belajar bagaimana membuat objek-objek itu menggunakan class dan bagaimana objek-objek itu dapat berinteraksi. Seru kan? Yuk, kita mulai dengan memahami dua hal penting: class dan object."]},{"i":"class-dan-object-definisi-dasar","l":"Class dan Object: Definisi Dasar","p":["Oke, langsung aja! Dalam OOP, class adalah seperti cetak biru ( blueprint) dari suatu benda. Misalnya, kalian bisa bayangkan class itu seperti blueprint mobil. Dari blueprint ini, kita bisa bikin banyak mobil yang berbeda-beda. Mobil-mobil yang kita buat dari blueprint ini kita sebut sebagai object.","Jadi, intinya:","Class: Blueprint atau rancangannya.","Object: Barang hasil dari blueprint tersebut, yang \"hidup\" di dalam program."]},{"l":"Contoh Class dan Object di Python","p":["Kalian bisa lihat, kita sudah bikin dua object mobil1 dan mobil2 dari class Mobil. Mereka berbeda, tapi berasal dari blueprint yang sama!"]},{"l":"Membuat Class di Python","p":["Sekarang, yuk kita mulai mengisi class kita dengan atribut dan metode (fungsi-fungsi yang bisa dipakai oleh objek)."]},{"l":"Atribut dan Metode","p":["Dalam class, kita bisa punya atribut, yang menggambarkan sifat-sifat dari object, dan metode, yaitu fungsi yang bisa dijalankan oleh object.","Misalnya, class Mobil bisa punya atribut seperti warna, merek, dan kecepatan, serta metode untuk menjalankan atau menghentikan mobil."]},{"l":"Membuat Constructor dengan __init__","p":["Constructor adalah fungsi khusus dalam class yang otomatis dipanggil saat object baru dibuat. Biasanya kita menggunakannya untuk mengatur atribut-atribut awal."]},{"i":"apa-itu-self","l":"Apa itu self?","p":["Kalian pasti bertanya-tanya, apa sih self itu? Singkatnya, self merujuk pada object itu sendiri. Jadi setiap kali kita membuat object baru, self akan \"mengikat\" object tersebut ke atribut dan metode di dalam class.","Sebagai contoh:","self.merek merujuk ke atribut merek milik object yang spesifik (misal, mobil1 atau mobil2).","self.jalankan() berarti kita memanggil metode jalankan untuk object yang spesifik.","Baik, mari kita lanjutkan materi tentang cara membuat object dari class dan bagaimana cara mengakses atribut serta metode pada object."]},{"l":"Membuat Object dari Class","p":["Setelah kita punya class dengan atribut dan metode, saatnya kita membuat object dari class tersebut. Ini disebut dengan instansiasi, yaitu proses pembuatan object dari sebuah class."]},{"l":"Contoh Instansiasi Object","p":["Mari kita ambil contoh class Mobil yang sudah kita buat sebelumnya. Kita akan membuat beberapa mobil baru dari class tersebut.","Sekarang, mobil1 dan mobil2 adalah dua object berbeda yang berasal dari class Mobil. Mereka punya atribut yang berbeda (merek dan warna), tapi keduanya bisa melakukan hal yang sama, seperti jalankan dan berhenti."]},{"l":"Atribut dan Metode pada Object","p":["Setelah kita punya object, kita bisa mengakses atribut dan menggunakan metode yang ada di dalam class tersebut. Berikut adalah cara mengakses atribut dan metode dari object."]},{"l":"Mengakses Atribut Object","p":["Atribut dari sebuah object bisa diakses dengan menggunakan notasi titik (.). Misalnya, kita ingin melihat merek dan warna dari mobil1."]},{"l":"Memanggil Metode pada Object","p":["Selain atribut, kita juga bisa memanggil metode yang ada di dalam class. Seperti ini:","Di sini, metode jalankan() dipanggil untuk mobil1, dan metode berhenti() dipanggil untuk mobil2. Karena mereka adalah object yang berbeda, hasilnya juga spesifik untuk masing-masing object.","Saat kita membuat object dari sebuah class, kita bisa memodifikasi atribut object tersebut setelah object dibuat. Yuk kita bahas bagaimana caranya!"]},{"l":"Menambah Atribut Object","p":["Kita bisa menambahkan atribut baru ke object setelah object tersebut dibuat. Misalnya, kita ingin menambahkan atribut baru tahun pada object mobil1 yang belum ada sebelumnya."]},{"l":"Mengubah Atribut Object","p":["Atribut yang sudah ada bisa diubah dengan cara yang sama seperti menambah atribut. Misalnya, kita ingin mengubah warna mobil dari Merah menjadi Putih."]},{"l":"Menghapus Atribut Object","p":["Kita juga bisa menghapus atribut dari object dengan menggunakan kata kunci del. Misalnya, kita ingin menghapus atribut tahun dari mobil1.","Jadi, dengan ini, kita bisa membuat object yang lebih dinamis dan fleksibel!"]},{"l":"Best Practices dalam OOP","p":["Sekarang setelah kalian paham dasar-dasar OOP, yuk kita bahas beberapa best practices atau praktik terbaik dalam penggunaan OOP. Hal ini penting agar kode yang kalian buat mudah dipahami, dirawat, dan diperluas di masa mendatang."]},{"l":"Gunakan Nama Class dengan Huruf Kapital","p":["Biasanya, nama class ditulis dengan huruf kapital pada huruf pertama setiap kata, contohnya: Mahasiswa, Mobil, Lingkaran, dsb. Hal ini membuat kode lebih mudah dibaca dan mengikuti konvensi umum."]},{"l":"Pisahkan Logika dengan Menggunakan Metode","p":["Sebisa mungkin, masukkan logika atau tindakan-tindakan yang berhubungan dengan object ke dalam metode di dalam class. Jangan menaruh logika di luar class, karena ini akan memecah fokus dan membuat kode lebih sulit diikuti."]},{"l":"Jaga Atribut agar Konsisten","p":["Cobalah untuk menjaga atribut object konsisten di seluruh program. Misalnya, jika mobil punya atribut merek dan warna, pastikan semua object Mobil memiliki atribut ini. Jangan menambahkan atribut baru secara sembarangan, karena bisa membingungkan."]},{"l":"Gunakan Constructor untuk Inisialisasi","p":["Selalu gunakan constructor (__init__) untuk menetapkan nilai awal atribut object. Ini membuat object kalian lebih terstruktur dan jelas sejak awal."]},{"l":"Buat Kode Modular dan Reusable","p":["OOP sangat mendukung modularitas, di mana kalian bisa membuat class yang mudah digunakan kembali di berbagai bagian program. Buat class dan metode yang bersifat umum dan bisa digunakan di berbagai situasi."]},{"l":"Studi Kasus Sederhana","p":["Mari kita coba membuat sebuah studi kasus sederhana untuk lebih memahami konsep class dan object. Misalnya, kita akan membuat class Mahasiswa yang menggambarkan mahasiswa di sebuah universitas."]},{"l":"Contoh Class Mahasiswa","p":["Di sini, kita membuat class Mahasiswa dengan atribut nama, nim, dan jurusan. Setiap object mahasiswa bisa memperkenalkan diri dan belajar mata kuliah tertentu. Keren, kan?","Selamat mencoba! Kalian bisa bereksperimen dengan class dan object ini, membuat variasi object yang berbeda, dan melihat bagaimana OOP membantu menyederhanakan kode kalian."]}],[{"l":"Contoh Kode"}],[{"i":"tugas-sistem-pengelolaan-data-mahasiswa","l":"Tugas: Sistem Pengelolaan Data Mahasiswa"},{"l":"Deskripsi Tugas","p":["Kalian diminta untuk membuat sebuah program Python yang dapat digunakan untuk mengelola data mahasiswa dalam sebuah kelas. Program ini akan memungkinkan pengguna untuk:","Menambahkan data mahasiswa.","Menampilkan data mahasiswa.","Menghitung rata-rata nilai dari semua mahasiswa.","Mencari mahasiswa dengan nilai tertinggi dan terendah.","Menampilkan mahasiswa yang lulus atau tidak lulus (nilai >= 60 lulus)."]},{"l":"Kriteria Program","p":["###S# 1. Buat class Mahasiswa yang memiliki atribut:","nama: Nama mahasiswa.","nim: Nomor Induk Mahasiswa.","nilai: Nilai akhir mahasiswa (integer)."]},{"i":"2-class-mahasiswa-harus-memiliki-metode","l":"2. Class Mahasiswa harus memiliki metode:","p":["deskripsi(): Menampilkan data mahasiswa (nama, NIM, nilai).","status_kelulusan(): Menampilkan status kelulusan (Lulus jika nilai >= 60, Tidak Lulus jika nilai < 60)."]},{"i":"3-buat-class-kelas-yang-memiliki-atribut","l":"3. Buat class Kelas yang memiliki atribut:","p":["daftar_mahasiswa: List untuk menyimpan object Mahasiswa yang sudah dibuat. Clue: sintaks untuk membuat list dalam class \"Kelas\" adalah: self.daftar_mahasiswa = []."]},{"i":"4-class-kelas-harus-memiliki-metode","l":"4. Class Kelas harus memiliki metode:","p":["tambah_mahasiswa(mahasiswa): Menambahkan object Mahasiswa ke dalam list daftar_mahasiswa. Clue: sintaks untuk menambahkan object ke dalam list adalah: self.daftar_mahasiswa.append(mahasiswa).","tampilkan_semua_mahasiswa(): Menampilkan semua data mahasiswa dalam kelas. Clue: gunakan perulangan for untuk menampilkan data mahasiswa. Misalnya, for mahasiswa in self.daftar_mahasiswa: print(mahasiswa.deskripsi()).","hitung_rata_rata_nilai(): Menghitung dan menampilkan rata-rata nilai mahasiswa dalam kelas. Clue: gunakan fungsi sum() untuk menjumlahkan nilai-nilai mahasiswa dan len() untuk menghitung jumlah mahasiswa.","cari_nilai_tertinggi(): Menampilkan mahasiswa dengan nilai tertinggi. Clue: gunakan fungsi max() untuk mencari nilai tertinggi.","cari_nilai_terendah(): Menampilkan mahasiswa dengan nilai terendah. Clue: gunakan fungsi min() untuk mencari nilai terendah."]},{"l":"Persyaratan Tambahan","p":["Gunakan looping(perulangan) dan if-else untuk mengecek status kelulusan mahasiswa dan menampilkan hasilnya.","Pastikan tipe data yang digunakan untuk atribut sudah sesuai (contoh: nilai harus berupa integer). Clue: gunakan fungsi int() untuk mengubah input menjadi integer.","Buatlah validasi sederhana agar nilai yang dimasukkan harus berada dalam rentang 0-100. Clue: gunakan pernyataan if untuk mengecek nilai yang dimasukkan. Misalnya, jika nilai < 0, maka nilai = 0. Jika nilai > 100, maka nilai = 100."]},{"l":"Panduan Penyelesaian"},{"l":"1. Class Mahasiswa","p":["Buat class Mahasiswa yang memiliki atribut nama, NIM, dan nilai.","Buat metode deskripsi() untuk menampilkan detail mahasiswa dan metode status_kelulusan() untuk mengecek apakah mahasiswa lulus atau tidak. Anda bisa memanggil self.status_kelulusan() di dalam metode deskripsi()."]},{"l":"2. Class Kelas","p":["Buat class Kelas yang menyimpan daftar mahasiswa dalam list.","Implementasikan metode untuk menambah mahasiswa, menampilkan semua data mahasiswa, menghitung rata-rata nilai, dan mencari nilai tertinggi serta terendah."]},{"l":"Contoh Hasil Eksekusi"},{"l":"Ketentuan Pengumpulan"},{"l":"Deadline","p":["Kumpulkan tugas kalian dalam bentuk file Python (.py) ke dalam Google Classroom paling lambat 1 minggu dari hari ini.","Selamat mengerjakan, dan jangan ragu untuk bertanya jika ada yang kurang jelas. Tetap semangat!"]},{"i":"nama-file","l":"Nama File:","p":["Tugas1_NIM_Nama.py"]}]]