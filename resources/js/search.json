[[{"l":"Pemrograman Lanjut dengan Python","p":["Selamat datang di Praktikum Pemrograman Lanjut dengan Python! Di sini, kalian akan menemukan berbagai materi praktikum dan sumber daya yang dirancang untuk membantu kalian menguasai Python dengan cara yang menyenangkan dan efektif.","\"The only way to learn a new programming language is by writing programs in it. — Dennis Ritchie\"","Itu sebabnya, di sini kamu akan menemukan berbagai tantangan dan latihan yang dirancang untuk membantumu menulis kode dan memahami konsep dengan lebih baik. Jangan ragu untuk menjelajahi semua materi dan mencoba hal-hal baru. Ingat, proses belajar adalah perjalanan yang penuh petualangan!"]},{"i":"tips--trik","l":"Tips & Trik","p":["Belajar Python itu seru, apalagi kalau kamu tahu beberapa trik jitu. Yuk, simak beberapa tips yang bisa bikin proses belajar kamu jadi lebih mudah dan menyenangkan!"]},{"l":"Mulai dari Dasar-dasar","p":["Pahami Sintaks Dasar: Sebelum melangkah jauh, pastikan kamu tahu dasar-dasarnya dulu. Seperti variabel, tipe data, dan operator. Ini penting banget buat membangun fondasi yang kuat.","Gunakan Platform Interaktif: Platform seperti Codecademy atau Learn Python the Hard Way bisa bantu kamu belajar dengan cara yang interaktif dan fun!"]},{"i":"latihan-latihan-latihan","l":"Latihan, Latihan, Latihan!","p":["Coding Setiap Hari: Cobalah untuk nulis kode setiap hari. Gak perlu lama, yang penting konsisten. Semakin sering kamu berlatih, semakin jago kamu!","Proyek Kecil: Mulai dengan proyek-proyek kecil, seperti bikin kalkulator atau game sederhana. Ini bakal bikin kamu lebih paham dan merasa lebih siap!"]},{"l":"Manfaatkan Dokumentasi dan Referensi","p":["Baca Dokumentasi Resmi: Dokumen resmi Python ( docs.python.org) adalah teman baik kamu. Selalu bisa diandalkan kalau kamu bingung.","Buku dan Tutorial: Buku seperti \"Automate the Boring Stuff with Python\" atau video tutorial di YouTube bisa jadi panduan yang jelas dan terstruktur."]},{"l":"Belajar dari Kode Orang Lain","p":["Baca Kode Open Source: Cek proyek open source di GitHub untuk melihat cara orang lain nulis kode. Ini bisa ngasih kamu ide baru dan trik-trik keren.","Gabung Komunitas: Bergabung dengan forum atau komunitas Python seperti Stack Overflow atau Reddit bisa bikin kamu dapat tips dan bantuan dari sesama pengembang."]},{"l":"Gunakan Alat Bantu","p":["Pilih IDE yang Tepat: Gunakan IDE seperti PyCharm atau editor seperti Visual Studio Code. Ini bakal bikin coding jadi lebih gampang.","Linting dan Format Kode: Gunakan alat seperti pylint atau black untuk menjaga kode tetap rapi dan sesuai standar."]},{"l":"Eksplorasi Konsep Lanjutan","p":["Pelajari Data Structures dan Algorithms: Mengerti struktur data seperti list, tuple, set, dan dictionary, serta algoritma dasar bakal bikin kamu lebih mahir dalam menyelesaikan masalah.","Coba Framework dan Library: Pelajari framework seperti Flask atau Django untuk pengembangan web, dan library seperti NumPy dan Pandas untuk analisis data."]},{"l":"Debugging dan Testing","p":["Gunakan Debugger: Alat debugging di IDE bisa bantu kamu menemukan dan memperbaiki kesalahan dengan lebih mudah.","Tulis Tes Unit: Dengan menulis tes unit menggunakan pytest, kamu bisa memastikan kode kamu bekerja dengan baik dan menghindari bug."]},{"l":"Selalu Terupdate","p":["Ikuti Berita Terbaru: Teknologi berubah cepat. Ikuti berita dan perkembangan terbaru di Python untuk tetap up-to-date dengan fitur dan alat terbaru.","Terus Belajar: Jangan berhenti belajar! Selalu cari cara untuk meningkatkan keterampilan kamu dan coba teknik baru yang menarik."]},{"l":"Gunakan Chatbot AI sebagai Bantuan","p":["Tanya Apa Saja: Bingung dengan konsep atau butuh penjelasan tambahan? Tanyakan saja ke ChatGPT! Dia bisa membantu menjelaskan konsep, memberikan contoh kode, dan memecahkan masalah.","Kode dan Debug: Jika kamu mengalami masalah dengan kode atau butuh bantuan debugging, kirimkan kode kamu dan AI akan bantu cari solusinya.","Sumber Daya dan Rekomendasi: Butuh rekomendasi buku, tutorial, atau alat bantu? AI bisa merekomendasikan sumber daya yang sesuai dengan kebutuhanmu.","Semoga tips ini membantu kamu dalam belajar Python! Selamat coding dan jangan lupa bersenang-senang! \uD83C\uDF89"]},{"l":"Sumber Daya Tambahan","p":["Dokumentasi Resmi Python: Referensi lengkap dan otoritatif.","Forum Diskusi Python: Bergabunglah dengan komunitas Python untuk bertanya dan berbagi pengetahuan.","Happy Coding! ✨"]}],[{"l":"Pengenalan Pemrograman","p":["Pemrograman ( programming) ibarat memberikan instruksi atau perintah kepada komputer untuk melakukan tugas tertentu. Bayangkan komputer itu seperti asisten yang sangat pintar, tapi dia hanya bisa melakukan apa yang kamu perintahkan secara tepat. Misalnya, jika kamu ingin asistenmu menghitung nilai matematika atau menganalisis data, kamu harus memberitahunya dengan jelas apa yang harus dilakukan.","Ilustrasi Pemrograman: Komputer bertindak seperti asisten yang menjalankan instruksi yang diberikan oleh programmer","Di dunia matematika, pemrograman sangat berguna. Kamu bisa menggunakan kode untuk melakukan perhitungan rumit, menganalisis data besar, atau bahkan memvisualisasikan grafik. Dengan kata lain, pemrograman bisa membantu kamu mengerjakan tugas-tugas matematika yang sulit dengan lebih cepat dan efisien.","Dalam pembelajaran ini, kamu akan mempelajari salah satu bahasa pemrograman yang paling populer, yaitu Python. Mari kita mulai dengan memahami dasar-dasar Python dan bagaimana kamu bisa menggunakan Python untuk menyelesaikan berbagai tugas matematika."]}],[{"l":"Pengantar Python"},{"l":"Pengenalan Python","p":["Python adalah salah satu bahasa pemrograman yang sangat populer dan mudah dipelajari, terutama untuk pemula. Dengan sintaks yang sederhana dan kemampuan untuk menangani berbagai tugas, Python adalah pilihan yang tepat untuk mulai belajar pemrograman."]},{"i":"kenapa-python","l":"Kenapa Python?","p":["Sederhana dan Mudah Dipahami, seperti menulis kalimat dalam bahasa sehari-hari.","Kuat dan serbaguna, bisa digunakan untuk banyak hal, mulai dari perhitungan matematika hingga pembuatan AI."]},{"i":"tipe-data-variabel-dan-operator","l":"Tipe Data, Variabel dan Operator"},{"l":"Tipe Data","p":["Sebelum kita membahas lebih jauh tentang variabel, mari kita pahami terlebih dahulu apa itu tipe data. Tipe data adalah jenis data yang bisa kamu simpan dalam variabel. Di Python, ada beberapa tipe data dasar yang sering digunakan."]},{"i":"tipe-data-dasar-di-python","l":"Tipe Data Dasar di Python:","p":["Integer ( int): Bilangan bulat tanpa desimal. Misalnya, 10, -3, 0.","Float ( float): Bilangan desimal. Misalnya, 3.14, -0.5, 2.0.","String ( str): Teks atau rangkaian karakter. Misalnya, Python, 123, 'Hello World!'.","Boolean ( bool): Nilai benar atau salah, yaitu True atau False."]},{"l":"Variabel","p":["Bayangkan variabel itu seperti kotak penyimpanan yang bisa kamu beri nama. Di dalam kotak ini, kamu bisa menyimpan berbagai jenis data, seperti angka atau teks. Tipe data menentukan jenis informasi yang bisa disimpan dalam variabel tersebut."]},{"i":"contoh","l":"Contoh:","p":["Penjelasan:","x, y, dan name adalah nama kotak (variabel) yang kita gunakan untuk menyimpan data.","x menyimpan angka bulat, yang disebut sebagai integer.","y menyimpan angka desimal, yang disebut sebagai float.","name menyimpan teks, yang disebut sebagai string.","is_active menyimpan nilai benar atau salah, yang disebut sebagai boolean.","Kamu bisa menggunakan nama yang sesuai dengan isi kotaknya. Misalnya, jika kamu ingin menyimpan nama seseorang, menggunakan nama variabel seperti name akan lebih masuk akal daripada menggunakan nama yang tidak relevan seperti x atau y."]},{"l":"Operator","p":["Operator adalah simbol yang digunakan untuk melakukan operasi pada data dalam variabel. Misalnya, jika kamu ingin menjumlahkan dua angka atau membandingkan dua nilai, kamu akan menggunakan operator."]},{"i":"contoh-1","l":"Contoh:","p":["Penjelasan:","Operator aritmatika melakukan operasi matematika dasar.","Operator pembanding digunakan untuk membandingkan dua nilai.","Operator logika digunakan untuk menggabungkan atau membalik kondisi."]},{"i":"kondisi-if-else","l":"Kondisi (If-Else)","p":["Dengan kondisi, kamu bisa membuat komputer membuat keputusan. Misalnya, kamu bisa memberi tahu komputer untuk melakukan sesuatu jika suatu kondisi tertentu terpenuhi."]},{"l":"Struktur If-Else"},{"i":"contoh-2","l":"Contoh:","p":["Penjelasan:","if digunakan untuk mengecek apakah suatu kondisi benar. Jika ya, maka blok kode di bawahnya akan dijalankan.","elif(else if) digunakan jika kondisi pertama tidak terpenuhi dan kamu ingin mengecek kondisi lainnya.","else digunakan untuk kondisi di luar if dan elif."]},{"i":"loop-pengulangan","l":"Loop (Pengulangan)","p":["Loop memungkinkan kamu untuk menjalankan bagian kode berulang kali. Misalnya, jika kamu ingin menghitung total dari beberapa angka, kamu bisa menggunakan loop."]},{"l":"For Loop","p":["For loop digunakan untuk mengulangi blok kode untuk setiap item dalam urutan."]},{"i":"contoh-3","l":"Contoh:","p":["Penjelasan:","range(1, 6) menghasilkan urutan angka dari 1 hingga 5.","for loop mengulangi blok kode untuk setiap angka dalam urutan."]},{"l":"While Loop","p":["While loop digunakan untuk mengulangi blok kode selama kondisi tertentu benar."]},{"i":"contoh-4","l":"Contoh:","p":["Penjelasan:","while loop terus mengulangi blok kode selama n lebih besar dari 0.","Faktorial dihitung dengan mengalikan faktorial dengan n dan kemudian mengurangi n hingga mencapai 0."]},{"l":"Fungsi","p":["Fungsi adalah cara untuk mengorganisir kode kamu dengan membuat blok kode yang bisa dipanggil berkali-kali. Ini membantu untuk membuat kode lebih bersih dan terstruktur."]},{"l":"Mendefinisikan dan Memanggil Fungsi"},{"i":"contoh-5","l":"Contoh:","p":["Penjelasan:","Fungsi kuadrat menerima satu parameter x dan mengembalikan x kuadrat.","Kamu bisa memanggil fungsi ini dengan memberikan nilai untuk x dan mendapatkan hasilnya."]},{"l":"Fungsi dengan Beberapa Parameter"},{"i":"contoh-6","l":"Contoh:","p":["Penjelasan:","Fungsi luas_segitiga menerima dua parameter, alas dan tinggi, dan mengembalikan luas segitiga.","Kamu bisa memanggil fungsi ini dengan memberikan nilai untuk alas dan tinggi."]},{"l":"Komentar","p":["Komentar adalah catatan atau penjelasan dalam kode yang tidak dijalankan oleh komputer. Mereka berguna untuk menulis informasi atau catatan tentang kode agar lebih mudah dipahami oleh orang lain (atau diri sendiri di masa depan)."]},{"i":"kenapa-komentar-penting","l":"Kenapa Komentar Penting?","p":["Menjelaskan Kode: Komentar bisa menjelaskan apa yang dilakukan oleh kode atau mengapa kode tersebut ditulis dengan cara tertentu.","Memudahkan Pemeliharaan: Ketika kamu atau orang lain kembali ke kode setelah beberapa waktu, komentar bisa membantu memahami apa yang sudah dilakukan tanpa harus membaca setiap baris kode dengan teliti."]},{"l":"Cara Menulis Komentar di Python","p":["Di Python, ada dua cara untuk menulis komentar:","Komentar Satu Baris: Komentar ini dimulai dengan tanda #. Semua yang ada setelah # pada baris tersebut dianggap sebagai komentar dan tidak akan dieksekusi oleh Python.","Komentar Beberapa Baris: Jika kamu perlu menulis komentar yang lebih panjang atau beberapa baris komentar, kamu bisa menggunakan tanda kutip tiga ( atau ''') untuk membuat komentar multi-baris.","Penjelasan:","Komentar ini dimulai dengan tiga tanda kutip ganda () dan diakhiri dengan tiga tanda kutip ganda. Python akan mengabaikan semua teks di antara tanda kutip ini."]},{"l":"Tips untuk Menulis Komentar","p":["Jangan berlebihan. Jangan terlalu banyak berkomentar. Jika kode sudah jelas, komentar yang berlebihan malah bisa membuat bingung.","Jelaskan logika, bukan sintaks. Fokuskan komentar pada logika dan alasan di balik kode, bukan hanya menjelaskan sintaks dasar yang sudah jelas."]}],[{"l":"Contoh Kode Python Dasar"}],[{"l":"Object Oriented Programming","p":["Halo teman-teman! Selamat datang di materi Pemrograman Berorientasi Objek atau dalam bahasa Inggris disebut dengan Object Oriented Programming (OOP). Nah, kalian mungkin bertanya, OOP itu apa sih? OOP adalah cara kita memikirkan program sebagai kumpulan objek yang saling berinteraksi. Berbeda dengan pemrograman prosedural yang cenderung fokus pada rangkaian langkah atau instruksi, OOP lebih fokus pada objek-objek yang \"hidup\" dalam program kita.","Di sini kita akan belajar bagaimana membuat objek-objek itu menggunakan class dan bagaimana objek-objek itu dapat berinteraksi. Seru kan? Yuk, kita mulai dengan memahami dua hal penting: class dan object."]}],[{"i":"class--object","l":"Class & Object","p":["Dalam OOP, class adalah seperti cetak biru ( blueprint) dari suatu benda. Misalnya, kalian bisa bayangkan class itu seperti blueprint mobil. Dari blueprint ini, kita bisa bikin banyak mobil yang berbeda-beda. Mobil-mobil yang kita buat dari blueprint ini kita sebut sebagai object.","Jadi, intinya:","Class: Blueprint atau rancangannya.","Object: Barang hasil dari blueprint tersebut, yang \"hidup\" di dalam program.","Contoh Class dan Object di Python","Kalian bisa lihat, kita sudah bikin dua object mobil1 dan mobil2 dari class Mobil. Mereka berbeda, tapi berasal dari blueprint yang sama!"]},{"l":"Membuat Class di Python","p":["Sekarang, yuk kita mulai mengisi class kita dengan atribut dan metode (fungsi-fungsi yang bisa dipakai oleh objek)."]},{"l":"Atribut dan Metode","p":["Dalam class, kita bisa punya atribut, yang menggambarkan sifat-sifat dari object, dan metode, yaitu fungsi yang bisa dijalankan oleh object.","Misalnya, class Mobil bisa punya atribut seperti warna, merek, dan kecepatan, serta metode untuk menjalankan atau menghentikan mobil."]},{"l":"Membuat Constructor dengan __init__","p":["Constructor adalah fungsi khusus dalam class yang otomatis dipanggil saat object baru dibuat. Biasanya kita menggunakannya untuk mengatur atribut-atribut awal."]},{"i":"apa-itu-self","l":"Apa itu self?","p":["Kalian pasti bertanya-tanya, apa sih self itu? Singkatnya, self merujuk pada object itu sendiri. Jadi setiap kali kita membuat object baru, self akan \"mengikat\" object tersebut ke atribut dan metode di dalam class.","Sebagai contoh:","self.merek merujuk ke atribut merek milik object yang spesifik (misal, mobil1 atau mobil2).","self.jalankan() berarti kita memanggil metode jalankan untuk object yang spesifik.","Baik, mari kita lanjutkan materi tentang cara membuat object dari class dan bagaimana cara mengakses atribut serta metode pada object."]},{"l":"Membuat Object dari Class","p":["Setelah kita punya class dengan atribut dan metode, saatnya kita membuat object dari class tersebut. Ini disebut dengan instansiasi, yaitu proses pembuatan object dari sebuah class."]},{"l":"Contoh Instansiasi Object","p":["Mari kita ambil contoh class Mobil yang sudah kita buat sebelumnya. Kita akan membuat beberapa mobil baru dari class tersebut.","Sekarang, mobil1 dan mobil2 adalah dua object berbeda yang berasal dari class Mobil. Mereka punya atribut yang berbeda (merek dan warna), tapi keduanya bisa melakukan hal yang sama, seperti jalankan dan berhenti."]},{"l":"Atribut dan Metode pada Object","p":["Setelah kita punya object, kita bisa mengakses atribut dan menggunakan metode yang ada di dalam class tersebut. Berikut adalah cara mengakses atribut dan metode dari object."]},{"l":"Mengakses Atribut Object","p":["Atribut dari sebuah object bisa diakses dengan menggunakan notasi titik (.). Misalnya, kita ingin melihat merek dan warna dari mobil1."]},{"l":"Memanggil Metode pada Object","p":["Selain atribut, kita juga bisa memanggil metode yang ada di dalam class. Seperti ini:","Di sini, metode jalankan() dipanggil untuk mobil1, dan metode berhenti() dipanggil untuk mobil2. Karena mereka adalah object yang berbeda, hasilnya juga spesifik untuk masing-masing object.","Saat kita membuat object dari sebuah class, kita bisa memodifikasi atribut object tersebut setelah object dibuat. Yuk kita bahas bagaimana caranya!"]},{"l":"Menambah Atribut Object","p":["Kita bisa menambahkan atribut baru ke object setelah object tersebut dibuat. Misalnya, kita ingin menambahkan atribut baru tahun pada object mobil1 yang belum ada sebelumnya."]},{"l":"Mengubah Atribut Object","p":["Atribut yang sudah ada bisa diubah dengan cara yang sama seperti menambah atribut. Misalnya, kita ingin mengubah warna mobil dari Merah menjadi Putih."]},{"l":"Menghapus Atribut Object","p":["Kita juga bisa menghapus atribut dari object dengan menggunakan kata kunci del. Misalnya, kita ingin menghapus atribut tahun dari mobil1.","Jadi, dengan ini, kita bisa membuat object yang lebih dinamis dan fleksibel!"]},{"l":"Best Practices dalam OOP","p":["Sekarang setelah kalian paham dasar-dasar OOP, yuk kita bahas beberapa best practices atau praktik terbaik dalam penggunaan OOP. Hal ini penting agar kode yang kalian buat mudah dipahami, dirawat, dan diperluas di masa mendatang."]},{"l":"Gunakan Nama Class dengan Huruf Kapital","p":["Biasanya, nama class ditulis dengan huruf kapital pada huruf pertama setiap kata, contohnya: Mahasiswa, Mobil, Lingkaran, dsb. Hal ini membuat kode lebih mudah dibaca dan mengikuti konvensi umum."]},{"l":"Pisahkan Logika dengan Menggunakan Metode","p":["Sebisa mungkin, masukkan logika atau tindakan-tindakan yang berhubungan dengan object ke dalam metode di dalam class. Jangan menaruh logika di luar class, karena ini akan memecah fokus dan membuat kode lebih sulit diikuti."]},{"l":"Jaga Atribut agar Konsisten","p":["Cobalah untuk menjaga atribut object konsisten di seluruh program. Misalnya, jika mobil punya atribut merek dan warna, pastikan semua object Mobil memiliki atribut ini. Jangan menambahkan atribut baru secara sembarangan, karena bisa membingungkan."]},{"l":"Gunakan Constructor untuk Inisialisasi","p":["Selalu gunakan constructor (__init__) untuk menetapkan nilai awal atribut object. Ini membuat object kalian lebih terstruktur dan jelas sejak awal."]},{"l":"Buat Kode Modular dan Reusable","p":["OOP sangat mendukung modularitas, di mana kalian bisa membuat class yang mudah digunakan kembali di berbagai bagian program. Buat class dan metode yang bersifat umum dan bisa digunakan di berbagai situasi."]},{"l":"Studi Kasus Sederhana","p":["Mari kita coba membuat sebuah studi kasus sederhana untuk lebih memahami konsep class dan object. Misalnya, kita akan membuat class Mahasiswa yang menggambarkan mahasiswa di sebuah universitas."]},{"l":"Contoh Class Mahasiswa","p":["Di sini, kita membuat class Mahasiswa dengan atribut nama, nim, dan jurusan. Setiap object mahasiswa bisa memperkenalkan diri dan belajar mata kuliah tertentu. Keren, kan?","Selamat mencoba! Kalian bisa bereksperimen dengan class dan object ini, membuat variasi object yang berbeda, dan melihat bagaimana OOP membantu menyederhanakan kode kalian."]}],[{"i":"contoh-kode-class--object","l":"Contoh Kode Class & Object"}],[{"i":"tugas-sistem-pengelolaan-data-mahasiswa","l":"Tugas: Sistem Pengelolaan Data Mahasiswa"},{"l":"Deskripsi Tugas","p":["Kalian diminta untuk membuat sebuah program Python yang dapat digunakan untuk mengelola data mahasiswa dalam sebuah kelas. Program ini akan memungkinkan pengguna untuk:","Menambahkan data mahasiswa.","Menampilkan data mahasiswa.","Menghitung rata-rata nilai dari semua mahasiswa.","Mencari mahasiswa dengan nilai tertinggi dan terendah.","Menampilkan mahasiswa yang lulus atau tidak lulus (nilai >= 60 lulus)."]},{"l":"Kriteria Program"},{"i":"1-buat-class-mahasiswa-yang-memiliki-atribut","l":"1. Buat class Mahasiswa yang memiliki atribut:","p":["nama: Nama mahasiswa.","nim: Nomor Induk Mahasiswa.","nilai: Nilai akhir mahasiswa (integer)."]},{"i":"2-class-mahasiswa-harus-memiliki-metode","l":"2. Class Mahasiswa harus memiliki metode:","p":["deskripsi(): Menampilkan data mahasiswa (nama, NIM, nilai).","status_kelulusan(): Menampilkan status kelulusan (Lulus jika nilai >= 60, Tidak Lulus jika nilai < 60)."]},{"i":"3-buat-class-kelas-yang-memiliki-atribut","l":"3. Buat class Kelas yang memiliki atribut:","p":["daftar_mahasiswa: List untuk menyimpan object Mahasiswa yang sudah dibuat. Clue: sintaks untuk membuat list dalam class \"Kelas\" adalah: self.daftar_mahasiswa = []."]},{"i":"4-class-kelas-harus-memiliki-metode","l":"4. Class Kelas harus memiliki metode:","p":["tambah_mahasiswa(mahasiswa): Menambahkan object Mahasiswa ke dalam list daftar_mahasiswa. Clue: sintaks untuk menambahkan object ke dalam list adalah: self.daftar_mahasiswa.append(mahasiswa).","tampilkan_semua_mahasiswa(): Menampilkan semua data mahasiswa dalam kelas. Clue: gunakan perulangan for untuk menampilkan data mahasiswa. Misalnya, for mahasiswa in self.daftar_mahasiswa: print(mahasiswa.deskripsi()).","hitung_rata_rata_nilai(): Menghitung dan menampilkan rata-rata nilai mahasiswa dalam kelas. Clue: gunakan fungsi sum() untuk menjumlahkan nilai-nilai mahasiswa dan len() untuk menghitung jumlah mahasiswa.","cari_nilai_tertinggi(): Menampilkan mahasiswa dengan nilai tertinggi. Clue: gunakan fungsi max() untuk mencari nilai tertinggi.","cari_nilai_terendah(): Menampilkan mahasiswa dengan nilai terendah. Clue: gunakan fungsi min() untuk mencari nilai terendah."]},{"l":"Persyaratan Tambahan","p":["Gunakan looping(perulangan) dan if-else untuk mengecek status kelulusan mahasiswa dan menampilkan hasilnya.","Pastikan tipe data yang digunakan untuk atribut sudah sesuai (contoh: nilai harus berupa integer). Clue: gunakan fungsi int() untuk mengubah input menjadi integer.","Buatlah validasi sederhana agar nilai yang dimasukkan harus berada dalam rentang 0-100. Clue: gunakan pernyataan if untuk mengecek nilai yang dimasukkan. Misalnya, jika nilai < 0, maka nilai = 0. Jika nilai > 100, maka nilai = 100."]},{"l":"Panduan Penyelesaian"},{"l":"1. Class Mahasiswa","p":["Buat class Mahasiswa yang memiliki atribut nama, NIM, dan nilai.","Buat metode deskripsi() untuk menampilkan detail mahasiswa dan metode status_kelulusan() untuk mengecek apakah mahasiswa lulus atau tidak. Anda bisa memanggil self.status_kelulusan() di dalam metode deskripsi()."]},{"l":"2. Class Kelas","p":["Buat class Kelas yang menyimpan daftar mahasiswa dalam list.","Implementasikan metode untuk menambah mahasiswa, menampilkan semua data mahasiswa, menghitung rata-rata nilai, dan mencari nilai tertinggi serta terendah."]},{"l":"Contoh Hasil Eksekusi"},{"l":"Ketentuan Pengumpulan"},{"l":"Deadline","p":["Kumpulkan tugas kalian dalam bentuk file Python (.py) ke dalam Google Classroom paling lambat Senin, 16 September 2024 pukul 23.59 WIB.","Selamat mengerjakan, dan jangan ragu untuk bertanya jika ada yang kurang jelas. Tetap semangat!"]},{"i":"nama-file","l":"Nama File:","p":["Tugas1_NIM_Nama.py"]}],[{"l":"Prinsip-prinsip dalam Object-Oriented Programming","p":["Hai! Sebelum kita mendalami lebih jauh tentang prinsip-prinsip dari Object-Oriented Programming (OOP), mari kita mulai dengan memahami dasar dari OOP itu sendiri. OOP adalah salah satu paradigma pemrograman yang berfokus pada konsep objek. Dalam OOP, kita membuat program dengan menggabungkan data dan fungsi yang bekerja dengan data tersebut ke dalam sebuah objek.","Bayangkan kamu sedang membuat aplikasi yang melibatkan berbagai entitas seperti mobil, hewan, atau orang. Setiap entitas ini memiliki karakteristik dan perilaku. Misalnya, mobil memiliki karakteristik seperti warna, merek, dan jumlah roda, serta perilaku seperti bergerak atau berhenti. OOP memungkinkan kita untuk memodelkan entitas-entitas ini secara efisien melalui konsep kelas dan objek.","Nah, OOP tidak hanya sebatas pada objek saja. OOP juga memiliki beberapa prinsip atau sifat yang membantu kita dalam membuat kode yang lebih modular, mudah dibaca, dan dipelihara. Prinsip-prinsip ini memungkinkan kita untuk:","Mewarisi fitur-fitur dari objek lain.","Menyembunyikan detail yang tidak perlu diakses oleh bagian lain dari program.","Menggunakan metode yang sama dengan cara yang berbeda pada berbagai objek.","Menyederhanakan hal-hal yang kompleks sehingga lebih mudah dipahami dan digunakan.","Dengan memahami prinsip-prinsip dasar dalam OOP, kamu akan lebih mudah membuat program yang tidak hanya bekerja dengan baik, tapi juga terorganisir dengan rapi dan lebih efisien. Di bagian selanjutnya, kita akan membahas lebih detail mengenai keempat sifat utama dalam OOP, yaitu:","Inheritance(Pewarisan)","Encapsulation(Enkapsulasi)","Polymorphism(Polimorfisme)","Abstraction(Abstraksi)","Masing-masing sifat ini memiliki peran penting dalam bagaimana kita mendesain dan menulis program berbasis objek. Yuk, kita lanjutkan ke pembahasan selanjutnya!"]}],[{"l":"Inheritance"},{"i":"apa-itu-inheritance","l":"Apa Itu Inheritance?","p":["Bayangkan kamu punya keluarga besar. Sifat dan kebiasaan tertentu dari orang tua bisa diwariskan ke anak. Dalam dunia kode, kita punya konsep inheritance atau pewarisan, yang artinya kelas child(anak) bisa mewarisi properti atau metode dari kelas parent(orang tua), sehingga kita tidak perlu menulis ulang hal yang sama."]},{"i":"contoh-kasus-sederhana","l":"Contoh Kasus Sederhana:","p":["Kita akan mulai dengan membuat kelas Person, yaitu kelas parent yang punya dua atribut: name dan id. Kemudian kita tambahkan metode untuk menampilkan nama dan ID.","Penjelasan Kode:","__init__: Merupakan constructor yang dipanggil saat objek dibuat. Ini berfungsi untuk menginisialisasi atribut seperti name dan id.","display(): Metode yang menampilkan nilai dari name dan id dalam format kalimat.","Sekarang, kita buat objek Person:","Penjelasan: Di sini kita membuat objek person dengan nama Siti dan ID 123, kemudian memanggil metode display() untuk menampilkan informasi person tersebut.","Output:"]},{"l":"Membuat Kelas Anak yang Mewarisi dari Kelas Parent","p":["Sekarang kita buat kelas anak, yaitu Employee, yang mewarisi dari Person. Kelas ini akan memiliki semua atribut dan metode yang dimiliki oleh Person.","Penjelasan Kode:","class Employee(Person):: Menandakan bahwa Employee adalah kelas anak yang mewarisi dari kelas Person.","print_employee(): Metode tambahan khusus untuk kelas Employee.","Sekarang kita buat objek dari kelas Employee dan lihat bagaimana ia mewarisi metode dari Person.","Penjelasan:","pegawai.display(): Memanggil metode display() dari kelas Person, menunjukkan bahwa Employee mewarisi semua metode Person.","pegawai.print_employee(): Memanggil metode khusus yang hanya ada di Employee.","Output:"]},{"i":"menggunakan-super-untuk-memanggil-konstruktor-kelas-parent","l":"Menggunakan super() untuk Memanggil Konstruktor Kelas Parent","p":["Jika kamu ingin menambahkan lebih banyak properti ke kelas anak, tapi tetap ingin menggunakan properti dari kelas parent, kamu bisa menggunakan fungsi super() untuk memanggil konstruktor orang tua.","Contohnya, mari kita tambahkan atribut salary(gaji) dan position(jabatan) ke kelas Employee, tapi tetap ingin name dan id diwarisi dari kelas Person.","Penjelasan Kode:","super().__init__(name, idnumber): Memanggil konstruktor dari kelas parent, yaitu Person, untuk menginisialisasi atribut name dan idnumber.","self.salary dan self.position: Atribut tambahan yang ditambahkan khusus untuk kelas Employee.","print(): Menampilkan informasi lengkap tentang objek Employee dalam bentuk kalimat.","Output:"]},{"l":"Jenis-jenis Inheritance di Python","p":["Inheritance di Python juga memiliki berbagai bentuk, mirip dengan hubungan keluarga. Mari kita bahas satu per satu dengan contoh."]},{"i":"1-single-inheritance-anak-mewarisi-dari-satu-orang-tua-saja","l":"1. Single Inheritance: Anak mewarisi dari satu orang tua saja.","p":["Penjelasan Kode:","Employee mewarisi dari satu kelas, yaitu Person.","Employee menambahkan atribut department dan metode display_employee().","Output:"]},{"i":"2-multiple-inheritance-anak-bisa-mewarisi-dari-lebih-dari-satu-orang-tua","l":"2. Multiple Inheritance: Anak bisa mewarisi dari lebih dari satu orang tua.","p":["Penjelasan Kode:","Derived mewarisi dari dua kelas, Base1 dan Base2.","Konstruktor Derived memanggil konstruktor dari kedua kelas induk.","Metode printStrs() menampilkan atribut dari kedua kelas induk.","Output:"]},{"i":"3-multilevel-inheritance-seperti-hubungan-kakek-ayah-dan-anak-dimana-anak-mewarisi-dari-orang-tua-dan-orang-tua-mewarisi-dari-kakek","l":"3. Multilevel Inheritance: Seperti hubungan kakek, ayah, dan anak, dimana anak mewarisi dari orang tua, dan orang tua mewarisi dari kakek.","p":["Penjelasan Kode:","Child mewarisi dari Parent, yang juga mewarisi dari Grandparent.","Dengan menggunakan super(), setiap kelas memanggil konstruktor dari kelas induknya untuk menginisialisasi atribut yang diwariskan.","Metode display_info() menampilkan semua atribut yang dimiliki oleh Child dalam bentuk kalimat.","Output:"]},{"i":"4-hierarchical-inheritance-satu-kelas-orang-tua-bisa-punya-beberapa-anak","l":"4. Hierarchical Inheritance: Satu kelas orang tua bisa punya beberapa anak.","p":["Penjelasan Kode:","Child1 dan Child2 keduanya mewarisi dari kelas Parent.","Masing-masing kelas anak menambahkan atribut dan metode spesifik mereka sendiri.","Objek anak1 dan anak2 memanfaatkan atribut dan metode dari kelas induk Parent serta atribut dan metode mereka sendiri.","Output:"]},{"i":"5-hybrid-inheritance-kombinasi-dari-berbagai-jenis-inheritance-di-atas","l":"5. Hybrid Inheritance: Kombinasi dari berbagai jenis inheritance di atas.","p":["Penjelasan Kode:","Child1 mewarisi dari Parent1.","Child2 mewarisi dari Parent1 dan Parent2(multiple inheritance).","Ini adalah contoh Hybrid Inheritance yang menggabungkan single dan multiple inheritance.","Setiap kelas anak menambahkan atribut dan metode spesifik mereka sendiri.","Output:"]},{"l":"Contoh Penggunaan Inheritance","p":["Kamu bisa juga menambahkan properti khusus di kelas anak. Misalnya, kita punya kelas Person dan kita ingin menambahkan tanggal lahir di kelas anak:","Penjelasan Kode:","Student mewarisi dari Person dan menambahkan atribut dob(tanggal lahir).","Menggunakan super().__init__(name, age) untuk menginisialisasi atribut dari kelas Person.","Metode display_info() menampilkan semua atribut, termasuk yang baru ditambahkan, dalam bentuk kalimat.","Output:"]}],[{"l":"Encapsulation"},{"i":"apa-itu-encapsulation","l":"Apa Itu Encapsulation?","p":["Bayangkan kamu bekerja di sebuah perusahaan besar dengan berbagai divisi seperti akuntansi, keuangan, dan penjualan. Setiap divisi memiliki data dan tugasnya sendiri yang perlu dijaga kerahasiaannya. Encapsulation atau enkapsulasi dalam pemrograman berorientasi objek (OOP) adalah konsep yang mirip dengan situasi ini. Enkapsulasi melibatkan pembungkusan data (atribut) dan metode (fungsi) yang bekerja pada data tersebut dalam satu unit, yaitu kelas. Ini membantu melindungi data dari akses langsung dan modifikasi yang tidak disengaja."]},{"i":"manfaat-encapsulation","l":"Manfaat Encapsulation:","p":["Pengamanan Data: Melindungi data dari perubahan yang tidak diinginkan dari luar kelas.","Informasi Tersembunyi: Menyembunyikan detail implementasi internal dan hanya menampilkan antarmuka yang diperlukan.","Kontrol Akses: Mengatur siapa yang bisa mengakses atau memodifikasi data tertentu.","Pemeliharaan Mudah: Memudahkan perubahan implementasi internal tanpa mempengaruhi kode yang menggunakan kelas tersebut."]},{"i":"jenis-jenis-anggota-kelas-dalam-enkapsulasi","l":"Jenis-Jenis Anggota Kelas dalam Enkapsulasi:","p":["Public Members: Anggota yang dapat diakses dari mana saja.","Protected Members: Anggota yang seharusnya hanya diakses dalam kelas itu sendiri dan kelas turunannya.","Private Members: Anggota yang hanya dapat diakses dalam kelas itu sendiri."]},{"l":"Public Members","p":["Public members adalah anggota kelas yang dapat diakses dari mana saja, baik di dalam maupun di luar kelas."]},{"i":"contoh-public-members","l":"Contoh Public Members:","p":["Penjelasan Kode:","self.brand dan self.model adalah public members yang dapat diakses dari luar kelas.","Metode display_info() menampilkan informasi tentang mobil.","Output:"]},{"l":"Protected Members","p":["Protected members adalah anggota kelas yang seharusnya hanya diakses di dalam kelas itu sendiri dan kelas turunannya. Di Python, kita menggunakan satu garis bawah (_) sebagai konvensi untuk menandakan bahwa anggota tersebut adalah protected."]},{"i":"contoh-protected-members","l":"Contoh Protected Members:","p":["Penjelasan Kode:","self._a: Menandakan bahwa atribut _a adalah anggota protected.","Derived mewarisi dari Base dan dapat mengakses serta memodifikasi atribut _a.","Meskipun anggota protected dapat diakses dari luar kelas, disarankan untuk tidak melakukannya.","Output:"]},{"l":"Private Members","p":["Private members adalah anggota kelas yang tidak dapat diakses dari luar kelas maupun dari kelas turunannya. Di Python, kita menggunakan dua garis bawah (__) sebagai konvensi untuk menandakan bahwa anggota tersebut adalah private. Python menggunakan name mangling untuk menyembunyikan atribut ini."]},{"i":"contoh-private-members","l":"Contoh Private Members:","p":["Penjelasan Kode:","self.__c: Menandakan bahwa atribut __c adalah anggota private.","Metode display_private() di kelas Base dapat mengakses __c.","Kelas Derived mencoba mengakses atribut __c, tetapi akan menghasilkan error karena __c adalah private.","Mengakses __c dari objek Base juga akan menghasilkan error.","Output:"]},{"l":"Contoh Penggunaan Encapsulation","p":["Mari kita lihat contoh yang lebih lengkap di mana kita menggunakan enkapsulasi untuk mengatur akses ke atribut dan metode dalam kelas.","Penjelasan Kode:","self.name: Public member yang dapat diakses dari mana saja.","self._age: Protected member yang dapat diakses di dalam kelas dan kelas turunannya.","self.__dob: Private member yang hanya dapat diakses di dalam kelas Person.","Metode get_dob() dan set_dob() digunakan untuk mengakses dan mengubah atribut private __dob.","Kelas Student mewarisi dari Person dan dapat mengakses protected member _age.","Mengakses private member __dob langsung dari luar kelas akan menghasilkan error.","Output:","Dengan menggunakan metode getter dan setter, kita dapat mengontrol bagaimana atribut private diakses dan dimodifikasi, menjaga integritas data dan mencegah perubahan yang tidak diinginkan dari luar kelas."]}],[{"l":"Polymorphism"},{"i":"apa-itu-polymorphism","l":"Apa Itu Polymorphism?","p":["Bayangkan kamu punya sebuah remote TV universal. Remote ini bisa digunakan untuk mengontrol berbagai perangkat—TV, DVD player, atau speaker. Meskipun kamu hanya menggunakan satu remote, tombol-tombol di remote itu bisa memiliki fungsi yang berbeda tergantung perangkat mana yang sedang kamu kontrol. Misalnya, tombol volume akan menambah volume pada TV, tapi pada speaker, tombol yang sama akan mengubah sumber input.","Di dunia pemrograman, Polymorphism bekerja dengan cara yang sama. Polimorfisme memungkinkan kita menggunakan metode atau fungsi dengan nama yang sama, tapi fungsinya bisa berbeda tergantung pada tipe data atau objek yang sedang kita tangani. Jadi, seperti halnya remote TV universal, metode yang sama bisa \"berfungsi\" berbeda pada konteks yang berbeda."]},{"l":"Polymorphism dengan Fungsi Bawaan","p":["Python punya banyak fungsi bawaan yang sudah mendukung polimorfisme. Salah satu contohnya adalah fungsi len(). Fungsi ini bisa menghitung panjang berbagai tipe data, seperti string dan list.","Penjelasan:","len(hello) mengembalikan panjang string, yaitu 5 karena ada 5 huruf.","len([1, 2, 3, 4]) menghitung jumlah elemen dalam list, yaitu 4.","Polimorfisme di sini terjadi karena meskipun len() digunakan untuk string dan list, hasilnya tetap sesuai dengan tipe datanya. Keren, kan?"]},{"l":"Polymorphism dengan Fungsi Buatan Sendiri","p":["Kita juga bisa membuat fungsi polimorfik kita sendiri, yang bisa bekerja dengan jumlah argumen berbeda. Contohnya, kita bisa membuat fungsi tambah yang bisa menjumlahkan dua atau tiga angka.","Penjelasan:","Ketika kita memanggil add(3, 4), fungsi hanya menggunakan dua angka karena argumen ketiga punya nilai default 0.","Ketika kita memanggil add(3, 4, 5), fungsi menjumlahkan ketiga angkanya.","Nah, kamu bisa lihat bahwa fungsi ini bisa beradaptasi dengan jumlah argumen yang diberikan. Ini adalah contoh praktis bagaimana polimorfisme bekerja di fungsi buatan sendiri."]},{"l":"Polymorphism dengan Kelas dan Metode","p":["Di dunia nyata, kita sering bekerja dengan objek dari berbagai kelas. Di sinilah polimorfisme bisa sangat membantu. Kamu bisa menggunakan metode yang sama dari berbagai objek tanpa khawatir tipe kelas apa yang kamu gunakan.","Mari kita lihat contoh sederhana di mana kita punya dua kelas berbeda, yaitu Burung dan Ikan. Keduanya memiliki metode move, tetapi dengan implementasi yang berbeda.","Penjelasan:","Kelas Burung dan Ikan punya metode yang sama yaitu move(), tetapi dengan implementasi yang berbeda.","Kita membuat objek burung dan ikan, lalu memanggil metode move() untuk keduanya dalam satu loop tanpa khawatir dengan kelasnya.","Output:","Hebatnya polimorfisme di sini adalah kita bisa memperlakukan objek dari berbagai kelas dengan cara yang sama, meskipun mereka berperilaku berbeda."]},{"i":"polymorphism-dengan-inheritance-pewarisan","l":"Polymorphism dengan Inheritance (Pewarisan)","p":["Polimorfisme juga sering muncul bersama pewarisan. Kamu bisa membuat kelas anak yang mewarisi metode dari kelas induk, tapi kamu juga bisa mengubah (override) metode tersebut agar sesuai dengan kebutuhan kelas anak.","Mari kita ambil contoh tentang Hewan, di mana ada kelas Anjing dan Kucing yang mewarisi metode dari kelas induk.","Penjelasan:","Kelas Hewan adalah kelas induk yang punya metode suara().","Kelas Anjing dan Kucing mewarisi dari kelas Hewan, tetapi mereka mengubah (override) metode suara() untuk memberikan implementasi yang spesifik.","Ketika kita memanggil suara() dari objek hewan2 dan hewan3, mereka memberikan suara yang sesuai dengan masing-masing kelas.","Output:"]},{"l":"Polymorphism dengan Fungsi dan Objek","p":["Kita juga bisa membuat fungsi yang menerima objek apa saja dan menggunakan polimorfisme di dalamnya. Fungsi ini tidak peduli dari kelas mana objek berasal, yang penting objek tersebut memiliki metode yang dibutuhkan.","Contoh di bawah ini menggunakan fungsi beraksi() yang bisa bekerja dengan objek dari berbagai kelas.","Penjelasan:","Fungsi beraksi() menerima objek apa saja, asalkan objek tersebut memiliki metode aksi().","Ini adalah contoh polimorfisme dengan fungsi, di mana kita bisa menggunakan objek dari berbagai kelas selama mereka punya metode yang diperlukan.","Output:"]},{"l":"Kesimpulan","p":["Dengan Polymorphism, kita bisa membuat kode yang lebih fleksibel dan mudah digunakan. Kamu tidak perlu khawatir tentang tipe objek yang sedang kamu tangani, karena dengan polimorfisme, kamu bisa memanggil metode yang sama untuk objek yang berbeda, dan mereka akan berperilaku sesuai dengan definisi kelas masing-masing.","Manfaat Polymorphism:","Fleksibilitas: Fungsi atau metode yang sama dapat bekerja dengan berbagai objek.","Kemudahan Pemeliharaan: Kode jadi lebih mudah diperbarui karena kita tidak perlu menulis ulang logika untuk setiap tipe data atau kelas.","Reusability: Menghindari duplikasi kode karena metode yang sama bisa diterapkan pada objek yang berbeda."]}],[{"l":"Abstraction"},{"i":"apa-itu-abstraction","l":"Apa Itu Abstraction?","p":["Bayangkan kamu punya sebuah mobil. Saat kamu mengemudikan mobil, kamu menggunakan pedal gas, rem, dan kopling tanpa perlu tahu bagaimana masing-masing komponen di dalam mesin bekerja. Kamu hanya perlu tahu bagaimana menggunakan fitur-fitur tersebut untuk mengemudikan mobil dengan benar.","Dalam dunia pemrograman, Abstraksi bekerja dengan cara yang sama. Abstraksi menyembunyikan detail implementasi yang kompleks dan hanya menampilkan informasi atau fungsionalitas yang penting dan relevan untuk pengguna. Ini membantu kita fokus pada apa yang dilakukan suatu objek, tanpa perlu memikirkan bagaimana semua bagian di dalamnya bekerja."]},{"l":"Kegunaan Abstraksi","p":["Menyederhanakan Kode: Dengan menyembunyikan detail yang kompleks, abstraksi membantu membuat kode lebih sederhana dan lebih mudah dipahami.","Modularitas: Abstraksi memudahkan desain kode yang modular, sehingga bagian-bagian kode dapat dikembangkan, diuji, dan diperbaiki secara terpisah.","Penggunaan Kembali Kode: Dengan menyembunyikan detail implementasi, kode yang telah dibuat bisa digunakan kembali di tempat lain tanpa perlu perubahan.","Kolaborasi Pengembang: Memudahkan kolaborasi dengan menyederhanakan antarmuka yang digunakan untuk berinteraksi dengan kode."]},{"l":"Abstraction dalam Python","p":["Di Python, kita dapat menerapkan abstraksi menggunakan kelas abstrak. Kelas abstrak adalah kelas yang tidak dapat diinstansiasi langsung dan berisi metode abstrak, yaitu metode yang dideklarasikan tetapi tidak diimplementasikan di dalam kelas tersebut. Kelas ini berfungsi sebagai template untuk subkelas yang akan mengimplementasikan metode tersebut."]},{"l":"Langkah-Langkah Implementasi Abstraction","p":["Mendefinisikan Kelas Abstrak Kelas abstrak adalah kelas yang tidak dapat diinstansiasi secara langsung. Kelas ini mendefinisikan metode abstrak yang harus diimplementasikan oleh subkelas.","Mendefinisikan Metode Abstrak Metode abstrak dideklarasikan di dalam kelas abstrak dan tidak memiliki implementasi. Subkelas harus memberikan implementasi untuk metode ini.","Mengimplementasikan Subkelas Subkelas yang mewarisi kelas abstrak harus mengimplementasikan semua metode abstrak. Subkelas ini adalah kelas konkret yang dapat diinstansiasi dan digunakan."]},{"l":"Abstraction vs. Non-Abstraction","p":["Berikut adalah contoh kode untuk menunjukkan perbedaan antara abstraction(abstraksi) dan kelas tanpa abstraksi."]},{"l":"1. Kode dengan Abstraction","p":["Di dalam kode abstraksi, kita menggunakan kelas abstrak dengan metode abstrak. Kelas abstrak ini tidak dapat diinstansiasi langsung dan memaksa subkelas untuk mengimplementasikan metode abstrak tersebut.","Kode:","Penjelasan:","Kelas Kendaraan adalah kelas abstrak. Ia mendefinisikan metode bergerak() dan bahan_bakar(), tetapi tidak memiliki implementasi. Metode tersebut harus diimplementasikan oleh setiap subkelas.","Subkelas Mobil dan Sepeda adalah kelas konkret yang mengimplementasikan metode abstrak dari kelas induk.","Jika subkelas tidak mengimplementasikan metode abstrak, maka akan terjadi kesalahan."]},{"i":"2-kode-dengan-kelas-biasa-tanpa-abstraksi","l":"2. Kode dengan Kelas Biasa (Tanpa Abstraksi)","p":["Dalam kode kelas biasa, kita dapat membuat metode langsung dalam kelas induk, dan kita dapat menggunakannya langsung tanpa harus mengimplementasikan ulang di subkelas.","Kode:","Penjelasan:","Kelas Kendaraan adalah kelas biasa yang sudah memiliki implementasi dari metode bergerak() dan bahan_bakar(). Metode ini dapat digunakan langsung oleh subkelas.","Subkelas Mobil dan Sepeda dapat mengubah (override) metode dari kelas induk jika mereka butuh perilaku yang berbeda.","Subkelas tidak diwajibkan untuk mengimplementasikan metode jika mereka tidak di-override."]},{"i":"perbedaan-utama","l":"Perbedaan Utama:"},{"i":"1-kelas-abstrak","l":"1. Kelas Abstrak:","p":["Mengandung metode yang tidak memiliki implementasi, hanya dideklarasikan.","Subkelas diwajibkan mengimplementasikan metode abstrak.","Kelas abstrak tidak bisa diinstansiasi langsung.","Digunakan untuk memastikan setiap subkelas memiliki perilaku yang spesifik."]},{"i":"2-kelas-tanpa-abstraksi","l":"2. Kelas Tanpa Abstraksi:","p":["Mengandung metode dengan implementasi yang dapat digunakan langsung oleh subkelas.","Subkelas tidak diwajibkan untuk mengubah atau mengimplementasikan ulang metode dari kelas induk.","Kelas biasa dapat diinstansiasi langsung.","Digunakan ketika kita ingin memberikan perilaku dasar yang dapat digunakan langsung oleh subkelas.","Dengan menggunakan abstraksi, kita dapat menyembunyikan detail teknis yang tidak perlu diketahui oleh pengguna, dan hanya menampilkan fungsionalitas yang relevan. Ini membuat kode lebih bersih, lebih mudah dipahami, dan lebih mudah dirawat."]}],[{"l":"Contoh Kode"},{"l":"Inheritance"},{"l":"Encapsulation"},{"l":"Polymorphism"},{"l":"Abstraction"}],[{"i":"tugas-sistem-pengelolaan-akun-pengguna","l":"Tugas: Sistem Pengelolaan Akun Pengguna"},{"i":"tujuan-tugas","l":"Tujuan Tugas:","p":["Mahasiswa diharapkan dapat memahami dan mempraktikkan konsep inheritance, encapsulation, polymorphism, dan abstraction dalam pemrograman Python melalui implementasi sederhana sistem pengelolaan akun pengguna."]},{"i":"studi-kasus-pengelolaan-akun-pengguna","l":"Studi Kasus: Pengelolaan Akun Pengguna","p":["Bayangkan kamu bekerja sebagai pengembang perangkat lunak yang bertugas untuk membuat sistem sederhana untuk mengelola akun pengguna. Sistem ini harus bisa menangani dua jenis akun pengguna, yaitu Akun Standar dan Akun Premium. Setiap jenis akun memiliki hak akses dan fitur yang berbeda.","Setiap pengguna akan memiliki informasi seperti nama, email, dan status keanggotaan(standar atau premium). Pengguna juga memiliki metode untuk login, logout, dan melihat informasi mereka."]},{"i":"fitur-yang-harus-dimiliki-sistem","l":"Fitur yang Harus Dimiliki Sistem:"},{"i":"1-inheritance-pewarisan","l":"1. Inheritance (Pewarisan):","p":["Buat kelas induk UserAccount yang memiliki atribut umum seperti name, email, dan metode seperti login(), logout(), dan view_account().","Buat subkelas StandardAccount dan PremiumAccount yang mewarisi dari kelas UserAccount. Berikan perilaku yang unik, seperti akses fitur tambahan untuk akun premium."]},{"i":"2-encapsulation-enkapsulasi","l":"2. Encapsulation (Enkapsulasi):","p":["Atribut seperti email dan status keanggotaan harus dienkapsulasi (privat). Gunakan getter dan setter untuk mengakses dan memodifikasi data ini.","Validasi pada setter harus memastikan bahwa hanya status keanggotaan yang valid (standar/premium) yang dapat diterima."]},{"i":"3-polymorphism-polimorfisme","l":"3. Polymorphism (Polimorfisme):","p":["Implementasikan polimorfisme pada metode view_account() agar akun standar dan premium dapat menampilkan informasi dengan cara yang berbeda.","Misalnya, StandardAccount hanya dapat melihat informasi dasar, sementara PremiumAccount dapat melihat informasi tambahan seperti tanggal berakhirnya keanggotaan."]},{"i":"4-abstraction-abstraksi","l":"4. Abstraction (Abstraksi):","p":["Definisikan metode abstrak access_features() di kelas induk UserAccount. Setiap subkelas harus mengimplementasikan metode ini dengan fitur yang sesuai, seperti fitur dasar untuk akun standar dan fitur premium untuk akun premium."]},{"i":"langkah-langkah-yang-dapat-dilakukan","l":"Langkah-Langkah yang Dapat Dilakukan:"},{"l":"1. Membuat Kelas Induk UserAccount","p":["Buat kelas abstrak bernama UserAccount yang memiliki atribut umum seperti name dan email, serta metode seperti login(), logout(), dan view_account()."]},{"l":"2. Mengembangkan Subkelas StandardAccount dan PremiumAccount","p":["Mewarisi kelas induk dan implementasikan metode khusus untuk setiap akun pengguna. Gunakan polimorfisme pada metode seperti view_account()."]},{"l":"3. Menerapkan Enkapsulasi dengan Getter dan Setter","p":["Buat getter dan setter untuk atribut privat email dan status keanggotaan. Tambahkan validasi input dalam setter."]},{"l":"4. Membuat Simulasi Penggunaan Akun","p":["Simulasikan pengoperasian sistem akun dengan menggunakan getter dan setter untuk menampilkan serta mengubah informasi pengguna."]},{"l":"Catatan","p":["Kalian tidak perlu menggunakan input dari pengguna. Cukup buat objek akun pengguna secara manual dan panggil metode yang sesuai untuk menampilkan informasi."]},{"i":"contoh-output-tidak-harus-sama","l":"Contoh Output (Tidak Harus Sama):"},{"l":"Laporan","p":["Buat laporan singkat yang menjelaskan bagaimana kalian menerapkan setiap konsep OOP (inheritance, encapsulation, polymorphism, dan abstraction). Laporan maksimal 2 halaman dalam format PDF."]},{"l":"Pengumpulan"},{"l":"Deadline","p":["Kumpulkan tugas kalian ke dalam Google Classroom paling lambat Senin, 30 September 2024 pukul 21.00 WIB."]},{"i":"nama-file","l":"Nama File:","p":["TugasAkun_NIM_Nama.py TugasAkun_NIM_Nama.pdf","Selamat mengerjakan, dan jangan ragu untuk bertanya jika ada yang kurang jelas. Tetap semangat! \uD83D\uDE80"]}],[{"l":"Struktur Data","p":["Halo! Kali ini kita bakal belajar tentang struktur data. Struktur data adalah cara kita mengorganisir dan mengelola data di program agar lebih efisien. Python menyediakan beberapa jenis struktur data bawaan yang bisa kamu gunakan untuk berbagai keperluan.","Di Python, ada beberapa struktur data utama yang perlu kamu kenal:"]},{"l":"1. List","p":["List adalah struktur data yang paling sering digunakan. Bayangkan list sebagai kotak yang bisa menyimpan berbagai data, mulai dari angka, teks, bahkan list lainnya. Kamu bisa mengubah isinya, menambah, atau menghapus elemen di dalamnya."]},{"l":"2. Tuple","p":["Tuple mirip dengan list, tapi dengan satu perbedaan penting: tuple tidak bisa diubah (immutable). Ini berguna kalau kamu ingin memastikan data tidak sengaja diubah selama program berjalan."]},{"l":"3. Dictionary","p":["Dictionary menyimpan data dalam bentuk pasangan key-value. Kamu bisa membayangkannya seperti kamus di mana ada kata (key) dan definisinya (value). Dictionary sangat berguna ketika kamu perlu mengakses data berdasarkan kunci tertentu."]},{"l":"4. Set","p":["Set adalah kumpulan item yang unik dan tidak berurutan. Ini berarti elemen di dalam set tidak bisa ada yang sama, dan urutannya tidak dijamin. Set sangat efektif saat kamu butuh memastikan tidak ada data duplikat."]},{"l":"5. List Comprehension","p":["List comprehension adalah cara yang ringkas dan elegan untuk membuat list baru dari iterable yang ada. Ini sering digunakan untuk mempercepat penulisan kode yang melibatkan pembuatan list.","Itulah gambaran umum tentang struktur data di Python. Setiap struktur data punya kegunaan yang berbeda tergantung situasi, dan memahami cara kerja masing-masing adalah kunci untuk menjadi programmer Python yang handal. Yuk, kita lanjut belajar lebih dalam!"]}],[{"l":"List","p":["Hai! Mau tau tentang salah satu tipe data paling sering dipakai di Python? Yap, kita akan bahas tentang List! List ini semacam \"wadah\" yang bisa kamu gunakan untuk menyimpan berbagai macam data. Mulai dari angka, string, hingga kombinasi dari berbagai tipe data sekaligus. Yuk, kita mulai!"]},{"i":"apa-itu-list","l":"Apa Itu List?","p":["Secara sederhana, List adalah kumpulan item yang bisa terdiri dari angka, teks, atau bahkan list lain. Elemen-elemen di dalam list disimpan dalam urutan tertentu dan bisa diakses melalui index. List di Python ditulis menggunakan kurung siku [] dan dipisahkan oleh koma ,.","Contoh:","Penjelasan:","buah_buahan: Sebuah list yang berisi string dengan nama buah.","angka: List yang berisi angka dari 1 hingga 5.","campuran: List yang berisi data campuran seperti string, angka, dan boolean.","Di sini, kita lihat bahwa list bisa berisi berbagai tipe data sekaligus."]},{"i":"ciri-ciri-list-di-python","l":"Ciri-ciri List di Python:","p":["Mutable: Artinya list bisa diubah setelah dibuat. Kamu bisa menambah, menghapus, atau mengubah elemen-elemen di dalamnya.","Dapat menyimpan berbagai tipe data: Dalam satu list, kamu bisa gabungin angka, string, boolean, dan lain-lain.","Diakses dengan index: Setiap elemen dalam list memiliki nomor urutannya, dimulai dari 0."]},{"l":"Cara Mengakses Elemen di List","p":["Untuk mengakses elemen di list, kamu bisa menggunakan index. Ingat, indeks pertama di Python adalah 0 ya, bukan 1!","Contoh:","Penjelasan:","buah_buahan[0] mengakses elemen pertama dari list, yaitu apel.","buah_buahan[1] mengakses elemen kedua dari list, yaitu pisang.","Python menggunakan indeks 0 untuk elemen pertama, 1 untuk elemen kedua, dan seterusnya.","Kalau mau akses dari belakang? Gampang, gunakan index negatif:","buah_buahan[-1] mengakses elemen terakhir dalam list, yaitu jeruk.","Indeks negatif dimulai dari -1 untuk elemen terakhir, -2 untuk elemen kedua terakhir, dan seterusnya."]},{"l":"Mengubah Elemen di List","p":["List itu mutable, artinya kamu bisa mengubah nilai elemen-elemen di dalamnya.","Contoh:","Penjelasan:","Di sini, elemen kedua dari buah_buahan, yaitu pisang, diubah menjadi mangga."]},{"l":"Menambah Elemen ke List","p":["Ada beberapa cara untuk menambah elemen ke dalam list:","Menggunakan append(): Menambahkan elemen di akhir list.","Penjelasan: append() menambahkan elemen anggur di akhir list.","Menggunakan insert(): Menyisipkan elemen di posisi tertentu.","Penjelasan: insert(1, mangga) menambahkan mangga di posisi kedua(indeks 1) pada list. Metode ini memungkinkan kita menyisipkan elemen di tempat yang kita inginkan.","Menggabungkan dua list dengan extend(): Menambah elemen-elemen dari list lain.","Penjelasan: extend() menambahkan semua elemen dari list sayuran ke dalam buah_buahan. Ini berbeda dari append(), yang hanya menambahkan satu elemen, sedangkan extend() menambahkan seluruh isi list lain."]},{"l":"Menghapus Elemen dari List","p":["Kamu juga bisa menghapus elemen dari list menggunakan beberapa cara:","Menggunakan remove(): Menghapus elemen berdasarkan nilainya.","Penjelasan: remove(jeruk) menghapus elemen jeruk dari list. Metode ini menghapus elemen berdasarkan nilai.","Menggunakan pop(): Menghapus elemen berdasarkan index, atau elemen terakhir jika tanpa index.","Penjelasan: pop(1) menghapus elemen di indeks 1, yaitu pisang. Jika tidak memberikan parameter, pop() akan menghapus elemen terakhir.","Menggunakan clear(): Menghapus semua elemen di list.","Penjelasan: clear() menghapus semua elemen dari list, membuatnya menjadi list kosong."]},{"l":"Menggunakan Loop pada List","p":["Kalau kamu mau melakukan sesuatu pada setiap elemen dalam list, kamu bisa menggunakan loop. Misalnya, untuk mencetak semua elemen di dalam list:","Output:"]},{"l":"Fungsi-fungsi Berguna untuk List","p":["Berikut beberapa fungsi lain yang sering dipakai saat bekerja dengan list:","len(): Menghitung jumlah elemen di list.","Penjelasan: len() mengembalikan jumlah elemen dalam list. Di sini, list buah_buahan memiliki 3 elemen.","sort(): Mengurutkan elemen dalam list.","Penjelasan: sort() mengurutkan elemen-elemen dalam list secara ascending(dari kecil ke besar).","reverse(): Membalik urutan elemen dalam list.","Penjelasan: reverse() membalikkan urutan elemen dalam list. Bukan mengurutkan, tetapi membalik urutan yang ada.","in: Mengecek apakah sebuah elemen ada di dalam list.","Penjelasan:","in digunakan untuk mengecek apakah suatu elemen ( apel) ada di dalam list buah_buahan.","Jika elemen ditemukan, hasilnya True, jika tidak, hasilnya False."]},{"i":"list-dalam-list-nested-list","l":"List dalam List (Nested List)","p":["List juga bisa menyimpan list lain di dalamnya. Ini disebut nested list.","Contoh:","Penjelasan:","nested_list[0] mengakses elemen pertama dari list dalam list, yaitu [1, 2, 3].","nested_list[1][1] mengakses elemen kedua dari list kedua, yaitu jeruk.","List bisa berisi list lain, dan kamu bisa mengakses elemen-elemen di dalamnya dengan indeks bersarang."]},{"l":"Kesimpulan","p":["List adalah tipe data yang sangat fleksibel di Python, bisa menyimpan berbagai macam data, dan mudah untuk dimodifikasi.","Kamu bisa menambah, menghapus, mengubah, dan mengakses elemen dalam list dengan mudah.","Python juga menyediakan banyak fungsi bawaan yang bisa memudahkan kamu dalam bekerja dengan list, seperti append(), remove(), sort(), dan lain-lain.","Selamat mencoba!"]}],[{"l":"Tuple","p":["Halo! Yuk, kita bahas salah satu tipe data di Python yang mirip-mirip dengan list tapi punya karakteristik unik, namanya Tuple! Apa itu tuple, bedanya dengan list apa, dan kapan harus pakai tuple? Semua akan kita bahas di sini. Let's go!"]},{"i":"apa-itu-tuple","l":"Apa Itu Tuple?","p":["Tuple adalah tipe data di Python yang bisa menampung sekumpulan data, mirip seperti list. Tapi, bedanya adalah tuple bersifat immutable, yang berarti setelah kamu buat, datanya gak bisa diubah-ubah lagi. Cocok nih kalau kamu punya data yang gak mau sengaja keubah.","Tuple ditulis menggunakan kurung biasa () dan elemen-elemennya dipisahkan oleh koma ,.","Contoh:","Penjelasan:","hewan: Sebuah tuple berisi string, yang merepresentasikan nama-nama hewan.","angka: Tuple yang berisi angka dari 1 hingga 5.","campuran: Tuple yang menyimpan berbagai tipe data, seperti string, angka, dan boolean.","Tuple memungkinkan kita untuk menyimpan berbagai tipe data sekaligus dalam satu struktur data."]},{"i":"ciri-ciri-tuple","l":"Ciri-ciri Tuple:","p":["Immutable: Setelah tuple dibuat, isinya gak bisa diubah, ditambah, atau dihapus.","Dapat menyimpan berbagai tipe data: Kamu bisa menyimpan angka, string, boolean, bahkan tuple lain.","Diakses dengan index: Sama seperti list, elemen di dalam tuple juga bisa diakses melalui indeks, dan indeks dimulai dari 0."]},{"i":"mengapa-memilih-tuple","l":"Mengapa Memilih Tuple?","p":["Kenapa sih harus pakai tuple? Nah, ini beberapa alasan:","Keamanan data: Kalau kamu punya data yang gak mau diubah-ubah secara tidak sengaja, pakailah tuple.","Lebih cepat: Karena sifatnya yang immutable, tuple bisa lebih cepat diakses dibandingkan list.","Digunakan sebagai key di dictionary: Berbeda dengan list, tuple bisa digunakan sebagai key (kunci) di dictionary karena sifatnya yang immutable."]},{"l":"Cara Membuat Tuple","p":["Membuat tuple itu mudah banget, cukup gunakan tanda kurung ().","Contoh:","Penjelasan:","buah_buahan: Ini adalah tuple berisi tiga string yang merepresentasikan nama buah-buahan.","Tuple ditandai dengan penggunaan tanda kurung biasa ().","Kalau cuma ada satu elemen dalam tuple, jangan lupa kasih koma , ya! Kalau gak, Python akan anggap itu bukan tuple.","Penjelasan: Jika tuple hanya memiliki satu elemen, jangan lupa menambahkan koma , setelah elemen pertama agar Python mengenalinya sebagai tuple, bukan string atau elemen tunggal lainnya."]},{"l":"Mengakses Elemen Tuple","p":["Sama seperti list, kamu bisa mengakses elemen dalam tuple menggunakan index.","Contoh:","Penjelasan:","Sama seperti list, elemen tuple diakses menggunakan index.","buah_buahan[0] mengakses elemen pertama, yaitu apel, dan buah_buahan[2] mengakses elemen ketiga, yaitu jeruk.","Kamu juga bisa pakai index negatif untuk akses dari belakang.","Index negatif digunakan untuk mengakses elemen dari akhir tuple. buah_buahan[-1] mengakses elemen terakhir, yaitu jeruk."]},{"i":"mengubah-tuple-wait-gak-bisa","l":"Mengubah Tuple (Wait... Gak Bisa!)","p":["Berhubung tuple itu immutable, kamu gak bisa mengubah elemen-elemen di dalamnya setelah dibuat. Contoh, kalau kamu coba mengganti elemen dalam tuple, Python bakal kasih error.","Contoh:","Tapi, kalau kamu benar-benar ingin mengubah tuple, kamu bisa mengubahnya jadi list dulu, modifikasi list-nya, terus ubah lagi jadi tuple.","Penjelasan:","Jika kamu benar-benar perlu mengubah tuple, kamu bisa mengonversi tuple ke list menggunakan list(), mengubah elemen yang diinginkan, lalu mengonversi kembali ke tuple menggunakan tuple().","Pada contoh ini, elemen mangga diubah menjadi pisang setelah tuple diubah sementara menjadi list."]},{"i":"menambah-elemen-ke-tuple-gak-bisa-juga","l":"Menambah Elemen ke Tuple (Gak Bisa Juga!)","p":["Kamu juga gak bisa nambah elemen ke tuple yang sudah ada, karena sifatnya yang immutable. Tapi, kalau kamu benar-benar butuh, kamu bisa gabungkan tuple yang ada dengan tuple baru.","Contoh:","Penjelasan:","Karena tuple immutable, kita tidak bisa menambah elemen langsung. Namun, kita bisa menggabungkan tuple yang ada dengan tuple baru.","Dalam contoh ini, kita membuat tuple buah_baru dan menambahkannya ke buah_buahan menggunakan operator +."]},{"l":"Unpacking Tuple","p":["Satu fitur keren dari tuple adalah unpacking. Dengan unpacking, kamu bisa langsung memisahkan elemen-elemen dalam tuple ke variabel-variabel yang berbeda.","Contoh:","Penjelasan:","Unpacking adalah fitur Python yang memungkinkan kita untuk memisahkan elemen tuple ke dalam variabel yang berbeda.","Dalam contoh ini, apel, mangga, dan jeruk di-unpack ke variabel buah1, buah2, dan buah3."]},{"l":"Fungsi-fungsi Tuple","p":["Walaupun immutable, tuple tetap punya beberapa fungsi bermanfaat:","len(): Menghitung jumlah elemen dalam tuple.","count(): Menghitung berapa kali elemen tertentu muncul dalam tuple.","Penjelasan: count() digunakan untuk menghitung berapa kali elemen tertentu muncul di dalam tuple. Dalam tuple angka, elemen 2 muncul dua kali.","index(): Menemukan indeks dari elemen tertentu.","Penjelasan: index() digunakan untuk menemukan indeks dari elemen tertentu. Di sini, elemen 3 berada pada indeks 2."]},{"i":"tuple-dalam-tuple-nested-tuple","l":"Tuple dalam Tuple (Nested Tuple)","p":["Seperti list, tuple juga bisa mengandung tuple lain di dalamnya.","Contoh:","Penjelasan:","Tuple juga bisa mengandung tuple lain di dalamnya. Ini disebut nested tuple.","Pada contoh ini, nested_tuple[1][0] mengakses elemen pertama dari tuple kedua, yaitu apel."]},{"i":"kapan-harus-menggunakan-tuple","l":"Kapan Harus Menggunakan Tuple?","p":["Saat kamu punya data yang tidak ingin diubah.","Ketika kamu butuh tipe data yang bisa digunakan sebagai key di dictionary.","Kalau kamu ingin sedikit optimasi kinerja, karena tuple lebih cepat dibandingkan list."]},{"l":"Kesimpulan","p":["Tuple adalah kumpulan elemen yang immutable (tidak bisa diubah).","Kamu bisa menyimpan berbagai tipe data di dalam tuple.","Elemen di dalam tuple bisa diakses melalui indeks, sama seperti list.","Tuple cocok digunakan kalau kamu punya data yang ingin dijaga keamanannya atau butuh tipe data yang lebih efisien."]}],[{"l":"Dictionary","p":["Hai! Kali ini kita bakal bahas tentang Dictionary. Kalau kamu pernah kepikiran bagaimana caranya menyimpan data yang berpasang-pasangan?, nah Dictionary adalah jawabannya!"]},{"i":"apa-itu-dictionary","l":"Apa Itu Dictionary?","p":["Dictionary adalah struktur data di Python yang menyimpan pasangan key-value. Ini mirip dengan kamus biasa: ada kata (key) dan definisi (value). Setiap key harus unik, tapi valuenya bisa apa saja: angka, string, list, bahkan dictionary lainnya!","Dictionary di Python ditulis menggunakan kurung kurawal {}, dan setiap pasangan key-value dipisahkan dengan titik dua :."]},{"l":"Contoh Membuat Dictionary","p":["Penjelasan:","mahasiswa: Ini adalah sebuah dictionary yang menyimpan informasi tentang seorang mahasiswa.","nama: Budi: nama adalah key dan Budi adalah value-nya.","umur: 21: umur adalah key dengan value 21.","jurusan: Teknik Informatika: jurusan adalah key dengan value Teknik Informatika.","Semua pasangan key-value dipisahkan oleh koma, dan keseluruhan dictionary dibungkus oleh kurung kurawal {}."]},{"i":"ciri-ciri-dictionary","l":"Ciri-ciri Dictionary:","p":["Unordered: Elemen-elemen di dalam dictionary tidak terurut. Jadi, urutan data saat dimasukkan mungkin berbeda saat diakses.","Mutable: Kamu bisa mengubah, menambah, atau menghapus elemen-elemen di dalamnya.","Key harus unik: Tidak boleh ada dua key yang sama dalam satu dictionary, tapi valuenya bisa sama.","Diakses dengan key, bukan index: Kamu gak pakai angka urut (index) kayak di list, tapi langsung pakai key untuk akses valuenya."]},{"l":"Cara Membuat Dictionary","p":["Membuat dictionary itu gampang banget, cukup gunakan tanda kurung kurawal {} dan tentukan key serta valuenya."]},{"i":"contoh-membuat-dictionary-1","l":"Contoh Membuat Dictionary","p":["Penjelasan:","kendaraan: Sebuah dictionary yang menyimpan informasi tentang sebuah kendaraan.","merk: Toyota: merk adalah key dengan value Toyota.","model: Avanza: model adalah key dengan value Avanza.","tahun: 2020: tahun adalah key dengan value 2020.","Struktur ini memudahkan untuk menyimpan dan mengakses data berdasarkan key yang unik."]},{"l":"Mengakses Elemen di Dictionary","p":["Untuk mengakses elemen di dictionary, kamu harus pakai key-nya, bukan index seperti di list."]},{"l":"Contoh Mengakses Elemen Dictionary","p":["Penjelasan:","kendaraan[merk]: Mengakses value dari key merk, yaitu Toyota.","kendaraan[tahun]: Mengakses value dari key tahun, yaitu 2020.","Dictionary memungkinkan kamu untuk mengakses data secara langsung menggunakan key yang spesifik, tanpa perlu mengingat posisi atau indexnya."]},{"l":"Mengakses Key yang Tidak Ada","p":["Penjelasan:","Jika kamu mencoba mengakses key yang tidak ada di dictionary, seperti warna dalam contoh di atas, Python akan menghasilkan error KeyError.","Ini terjadi karena key warna tidak didefinisikan dalam dictionary kendaraan."]},{"i":"menggunakan-metode-get","l":"Menggunakan Metode get()","p":["Penjelasan:","kendaraan.get(warna): Menggunakan metode get() untuk mengakses value dari key warna. Karena key ini tidak ada, hasilnya adalah None tanpa menghasilkan error.","kendaraan.get(warna, Tidak diketahui): Memberikan nilai default Tidak diketahui jika key warna tidak ditemukan. Ini lebih aman karena tidak akan menimbulkan KeyError."]},{"l":"Menambah atau Mengubah Elemen di Dictionary","p":["Kamu bisa menambah elemen baru atau mengubah value dari key yang sudah ada dengan cara sederhana."]},{"l":"Contoh Menambah Elemen","p":["Penjelasan:","kendaraan[warna] = Hitam: Menambah pasangan key-value baru ke dictionary. Key warna dengan value Hitam ditambahkan ke dictionary kendaraan.","Jika key warna sudah ada, nilai (value) dari key tersebut akan diubah menjadi Hitam."]},{"l":"Contoh Mengubah Elemen","p":["Penjelasan:","kendaraan[model] = Fortuner: Mengubah value dari key model dari Avanza menjadi Fortuner.","Karena dictionary mutable, kamu bisa mengubah value dari key yang sudah ada tanpa perlu membuat dictionary baru."]},{"l":"Menghapus Elemen di Dictionary","p":["Ada beberapa cara untuk menghapus elemen di dictionary:"]},{"i":"1-menggunakan-pop","l":"1. Menggunakan pop()","p":["Penjelasan:","kendaraan.pop(tahun): Menghapus pasangan key-value dengan key tahun dari dictionary kendaraan.","Metode pop() juga mengembalikan value yang dihapus, meskipun dalam contoh ini tidak disimpan atau ditampilkan."]},{"l":"2. Menggunakan del","p":["Penjelasan:","del kendaraan[warna]: Menghapus pasangan key-value dengan key warna dari dictionary kendaraan.","del adalah pernyataan (statement) yang digunakan untuk menghapus elemen berdasarkan key."]},{"i":"3-menggunakan-clear","l":"3. Menggunakan clear()","p":["Penjelasan:","kendaraan.clear(): Menghapus semua pasangan key-value dari dictionary kendaraan, menjadikannya dictionary kosong {}.","Metode clear() sangat berguna jika kamu ingin mengosongkan seluruh isi dictionary tanpa menghapus variabelnya."]},{"l":"Looping di Dictionary","p":["Kalau kamu mau melakukan iterasi melalui dictionary, kamu bisa loop berdasarkan key, value, atau keduanya."]},{"l":"1. Loop Berdasarkan Key","p":["Penjelasan:","for key in kendaraan: Mengiterasi melalui semua key dalam dictionary kendaraan.","print(key): Mencetak setiap key yang ada di dictionary."]},{"l":"2. Loop Berdasarkan Value","p":["Penjelasan:","kendaraan.values(): Mengembalikan semua value dalam dictionary kendaraan.","for value in kendaraan.values(): Mengiterasi melalui semua value.","print(value): Mencetak setiap value yang ada di dictionary."]},{"l":"3. Loop Berdasarkan Key dan Value","p":["Penjelasan:","kendaraan.items(): Mengembalikan pasangan key-value dalam bentuk tuple.","for key, value in kendaraan.items(): Mengiterasi melalui setiap pasangan key dan value.","print(f{key}: {value}): Mencetak key dan value dalam format yang lebih terbaca, misalnya merk: Toyota."]},{"l":"Fungsi-fungsi Berguna untuk Dictionary","p":["Python punya beberapa fungsi built-in yang sangat berguna saat bekerja dengan dictionary:"]},{"i":"1-menggunakan-len","l":"1. Menggunakan len()","p":["Penjelasan:","len(kendaraan): Menghitung jumlah pasangan key-value dalam dictionary kendaraan.","Di sini, dictionary kendaraan memiliki 3 pasangan key-value."]},{"i":"2-menggunakan-keys","l":"2. Menggunakan keys()","p":["Penjelasan:","kendaraan.keys(): Mengembalikan semua key dalam dictionary kendaraan sebagai objek dict_keys.","Objek dict_keys dapat diubah menjadi list jika diperlukan, misalnya list(kendaraan.keys())."]},{"i":"3-menggunakan-values","l":"3. Menggunakan values()","p":["Penjelasan:","kendaraan.values(): Mengembalikan semua value dalam dictionary kendaraan sebagai objek dict_values.","Objek dict_values dapat diubah menjadi list jika diperlukan, misalnya list(kendaraan.values())."]},{"i":"4-menggunakan-items","l":"4. Menggunakan items()","p":["Penjelasan:","kendaraan.items(): Mengembalikan semua pasangan key-value dalam dictionary kendaraan sebagai objek dict_items.","Objek dict_items berisi tuple yang berisi key dan value masing-masing pasangan."]},{"i":"5-menggunakan-update","l":"5. Menggunakan update()","p":["Penjelasan:","data_baru: Sebuah dictionary baru yang berisi pasangan key-value yang ingin ditambahkan atau diupdate.","kendaraan.update(data_baru): Menambahkan pasangan key-value dari data_baru ke dalam dictionary kendaraan. Jika key sudah ada (seperti tahun), maka value-nya akan diupdate.","Hasilnya, dictionary kendaraan sekarang memiliki key warna baru dan value tahun yang diupdate menjadi 2021."]},{"i":"nested-dictionary-dictionary-dalam-dictionary","l":"Nested Dictionary (Dictionary dalam Dictionary)","p":["Kamu juga bisa membuat nested dictionary alias dictionary di dalam dictionary. Cocok nih kalau kamu mau menyimpan data yang lebih kompleks!"]},{"l":"Contoh Nested Dictionary","p":["Penjelasan:","mahasiswa: Sebuah dictionary yang berisi dictionary lain sebagai value-nya.","Budi: {umur: 21, jurusan: Teknik Informatika}: Key Budi memiliki value berupa dictionary dengan key umur dan jurusan.","print(mahasiswa[Budi][jurusan]): Mengakses value jurusan dari dictionary yang merupakan value dari key Budi, menghasilkan output Teknik Informatika.","Nested dictionary memungkinkan kamu untuk menyimpan data hierarkis atau kompleks dengan lebih terstruktur."]},{"l":"Kesimpulan","p":["Dictionary menyimpan data dalam pasangan key-value.","Key harus unik, dan akses ke elemen dilakukan dengan key, bukan index.","Dictionary bersifat mutable, artinya bisa diubah, ditambah, atau dihapus setelah dibuat.","Kamu bisa melakukan looping berdasarkan key, value, atau keduanya di dictionary.","Fungsi seperti keys(), values(), items(), dan update() sangat berguna saat bekerja dengan dictionary."]}],[{"l":"Set","p":["Halo! Kali ini kita akan membahas tentang Set di Python. Mungkin kamu sudah familiar dengan list dan tuple, tapi tahu nggak sih kalau ada tipe data lain yang unik, namanya Set? Set punya karakteristik yang berbeda dari list dan tuple, terutama karena elemen-elemennya unik dan tidak terurut. Penasaran? Yuk, kita bahas lebih lanjut!"]},{"i":"apa-itu-set","l":"Apa Itu Set?","p":["Set adalah kumpulan elemen yang:","Unik: Artinya, gak ada elemen yang duplikat. Kalau kamu menambahkan elemen yang sama berkali-kali, set akan otomatis menghilangkan duplikatnya.","Tidak terurut: Set gak punya urutan tetap. Jadi, ketika kamu menampilkan elemen-elemen set, urutannya bisa berubah-ubah.","Set di Python ditulis menggunakan kurung kurawal{} atau menggunakan fungsi set()."]},{"l":"Contoh Membuat Set","p":["Penjelasan:","buah: Ini adalah sebuah set yang berisi tiga elemen unik: apel, jeruk, dan mangga.","Penggunaan kurung kurawal {} menunjukkan bahwa ini adalah sebuah set.","Saat dicetak, set akan menampilkan elemen-elemennya dalam urutan yang tidak teratur, tergantung pada bagaimana Python menyimpannya."]},{"i":"ciri-ciri-set-di-python","l":"Ciri-ciri Set di Python:","p":["Unordered: Set tidak memiliki urutan, jadi kamu gak bisa mengakses elemen set menggunakan index.","Mutable: Kamu bisa menambah dan menghapus elemen setelah set dibuat.","Unik: Set tidak mengizinkan adanya elemen duplikat."]},{"l":"Cara Membuat Set","p":["Ada dua cara untuk membuat set:"]},{"i":"1-menggunakan-kurung-kurawal-","l":"1. Menggunakan Kurung Kurawal {}","p":["Penjelasan:","hewan: Sebuah set yang berisi tiga elemen unik: kucing, anjing, dan burung.","Penggunaan kurung kurawal {} langsung menunjukkan bahwa ini adalah sebuah set.","Saat dicetak, set akan menampilkan elemen-elemennya dalam urutan yang tidak teratur."]},{"i":"2-menggunakan-fungsi-set","l":"2. Menggunakan Fungsi set()","p":["Penjelasan:","angka: Menggunakan fungsi set() untuk membuat sebuah set dari list [1, 2, 3, 4, 4, 5].","Karena set hanya menyimpan elemen unik, angka 4 yang duplikat dihilangkan, sehingga set hanya berisi {1, 2, 3, 4, 5}.","Fungsi set() berguna ketika kamu ingin menghilangkan duplikat dari iterable seperti list."]},{"l":"Membuat Set Kosong","p":["Penjelasan:","set_kosong: Menggunakan fungsi set() untuk membuat set kosong.","Penting untuk menggunakan set() karena menggunakan {} tanpa elemen akan dianggap sebagai dictionary kosong oleh Python.","print(type(set_kosong)) memastikan bahwa variabel tersebut adalah tipe data set."]},{"l":"Menambah Elemen ke Set","p":["Setelah set dibuat, kamu bisa menambahkan elemen baru menggunakan metode add()."]},{"i":"contoh-menambah-elemen-dengan-add","l":"Contoh Menambah Elemen dengan add()","p":["Penjelasan:","buah.add(mangga): Menambahkan elemen mangga ke dalam set buah.","Metode add() menambahkan satu elemen di akhir set. Jika elemen sudah ada, set tidak akan menambahkannya lagi karena set hanya menyimpan elemen unik.","Setelah penambahan, set buah berisi tiga elemen unik: 'apel', 'jeruk', dan 'mangga'.","Jika elemen yang kamu tambahkan sudah ada, set gak akan menambahkan duplikatnya."]},{"l":"Menghapus Elemen dari Set","p":["Untuk menghapus elemen dari set, kamu bisa menggunakan beberapa metode:"]},{"i":"1-menggunakan-remove","l":"1. Menggunakan remove()","p":["Penjelasan:","buah.remove(jeruk): Menghapus elemen jeruk dari set buah.","Metode remove() menghapus elemen berdasarkan nilai. Jika elemen yang ingin dihapus tidak ada dalam set, Python akan menghasilkan error KeyError.","Setelah penghapusan, set buah berisi 'apel' dan 'mangga'."]},{"i":"2-menggunakan-discard","l":"2. Menggunakan discard()","p":["Penjelasan:","buah.discard(apel): Menghapus elemen apel dari set buah.","Metode discard() mirip dengan remove(), tetapi jika elemen yang ingin dihapus tidak ada, Python tidak akan menghasilkan error. Ini membuat discard() lebih aman digunakan ketika kamu tidak yakin apakah elemen tersebut ada dalam set.","Setelah penghapusan, set buah hanya berisi 'mangga'."]},{"i":"3-menggunakan-pop","l":"3. Menggunakan pop()","p":["Penjelasan:","buah.pop(): Menghapus elemen acak dari set buah.","Karena set tidak terurut, elemen yang dihapus oleh pop() bisa berupa elemen mana saja dari set tersebut.","Setelah penghapusan, set buah akan berkurang satu elemen, tetapi kamu tidak bisa menentukan elemen mana yang dihapus."]},{"i":"4-menggunakan-clear","l":"4. Menggunakan clear()","p":["Penjelasan:","buah.clear(): Menghapus semua elemen dari set buah, menjadikannya set kosong {}.","Metode clear() berguna ketika kamu ingin mengosongkan seluruh isi set tanpa menghapus variabelnya.","Setelah penghapusan, set buah adalah set(), yaitu set kosong."]},{"l":"Operasi-operasi pada Set","p":["Set memiliki beberapa operasi matematika keren, seperti union, intersection, difference, dan symmetric difference. Ini sering digunakan dalam pemrograman untuk memanipulasi kumpulan data."]},{"i":"1-union-gabungan","l":"1. Union (Gabungan)","p":["Union akan menggabungkan dua set dan mengembalikan elemen-elemen unik dari keduanya. Kamu bisa menggunakan operator | atau metode union().","Penjelasan:","set1 | set2: Menggunakan operator | untuk menggabungkan set1 dan set2.","Hasilnya adalah set baru {1, 2, 3, 4, 5} yang berisi semua elemen unik dari kedua set.","Elemen 3 hanya muncul sekali karena set hanya menyimpan elemen unik."]},{"i":"2-intersection-irisan","l":"2. Intersection (Irisan)","p":["Intersection mengembalikan elemen-elemen yang sama di kedua set. Kamu bisa menggunakan operator atau metode intersection().","Penjelasan:","set1 set2: Menggunakan operator untuk mendapatkan irisan dari set1 dan set2.","Hasilnya adalah set {3}, yang merupakan elemen yang sama di kedua set.","Intersection berguna untuk menemukan elemen yang umum di antara dua set."]},{"i":"3-difference-selisih","l":"3. Difference (Selisih)","p":["Difference mengembalikan elemen-elemen yang ada di set pertama tapi gak ada di set kedua. Kamu bisa menggunakan operator - atau metode difference().","Penjelasan:","set1 - set2: Menggunakan operator - untuk mendapatkan selisih antara set1 dan set2.","Hasilnya adalah set {1, 2}, yang berisi elemen yang hanya ada di set1 dan tidak di set2.","Difference berguna untuk menemukan elemen yang unik pada satu set dibandingkan set lainnya."]},{"i":"4-symmetric-difference-selisih-simetris","l":"4. Symmetric Difference (Selisih Simetris)","p":["Symmetric Difference mengembalikan elemen-elemen yang ada di salah satu set, tapi gak ada di keduanya. Kamu bisa menggunakan operator ^ atau metode symmetric_difference().","Penjelasan:","set1 ^ set2: Menggunakan operator ^ untuk mendapatkan selisih simetris antara set1 dan set2.","Hasilnya adalah set {1, 2, 4, 5}, yang berisi elemen yang hanya ada di salah satu set tetapi tidak di kedua set.","Symmetric difference berguna untuk menemukan elemen yang unik pada kedua set secara bersamaan."]},{"l":"Looping di Set","p":["Kalau kamu ingin melakukan loop pada set, kamu bisa pakai for loop seperti di list."]},{"l":"Contoh Looping pada Set","p":["Penjelasan:","for item in buah: Mengiterasi melalui setiap elemen dalam set buah.","print(item): Mencetak setiap elemen yang diiterasi.","Karena set tidak terurut, urutan elemen yang di-loop bisa berbeda-beda setiap kali kamu menjalankan kode tersebut.","Looping pada set berguna untuk melakukan operasi tertentu pada setiap elemen tanpa mempedulikan urutan."]},{"l":"Fungsi-fungsi pada Set","p":["Python punya beberapa fungsi built-in yang bisa kamu gunakan saat bekerja dengan set:"]},{"i":"1-menggunakan-len","l":"1. Menggunakan len()","p":["Penjelasan:","len(buah): Menghitung jumlah elemen dalam set buah.","Hasilnya adalah 3 karena set buah berisi tiga elemen: 'apel', 'jeruk', dan 'mangga'.","Fungsi len() berguna untuk mengetahui ukuran atau jumlah elemen dalam set."]},{"l":"2. Menggunakan in","p":["Penjelasan:","apel in buah: Mengecek apakah elemen apel ada dalam set buah.","Hasilnya adalah True karena apel memang merupakan salah satu elemen dalam set.","Operator in berguna untuk melakukan pengecekan keberadaan elemen dalam set dengan cepat."]},{"i":"3-menggunakan-copy","l":"3. Menggunakan copy()","p":["Penjelasan:","buah.copy(): Membuat salinan dari set buah dan menyimpannya ke variabel buah_baru.","print(buah_baru): Menampilkan isi dari set salinan, yaitu {'apel', 'jeruk', 'mangga'}.","Metode copy() berguna ketika kamu ingin membuat salinan independen dari set asli tanpa mempengaruhi set tersebut."]},{"l":"Kesimpulan","p":["Set adalah kumpulan elemen yang unik dan tidak terurut.","Set mutable, jadi kamu bisa menambah dan menghapus elemen setelah dibuat.","Set punya banyak operasi matematika seperti union, intersection, difference, dan symmetric difference yang sering digunakan dalam pemrograman.","Set sangat berguna ketika kamu butuh tipe data yang tidak boleh ada duplikatnya atau ketika kamu perlu melakukan operasi matematika pada kumpulan data.","Selamat mencoba!"]}],[{"l":"List Comprehension","p":["Hai! Mau tahu cara membuat list dengan lebih cepat dan efisien di Python? Di sinilah List Comprehension masuk. Dengan List Comprehension, kamu bisa membuat list baru dengan hanya satu baris kode. Penasaran? Yuk, kita bahas lebih lanjut!"]},{"i":"apa-itu-list-comprehension","l":"Apa Itu List Comprehension?","p":["List Comprehension adalah cara singkat dan elegan untuk membuat list baru dari list yang sudah ada, atau bahkan dari range angka. Intinya, ini adalah cara yang lebih sederhana dan bersih untuk menulis loop dalam pembuatan list.","Sintaks dasarnya seperti ini:","Penjelasan:","expression: Bagian ini menentukan bagaimana setiap elemen dalam list baru akan dibentuk. Bisa berupa operasi matematika, fungsi, atau manipulasi data lainnya.","for item in iterable: Ini adalah loop yang mengambil setiap item dari iterable(seperti list, tuple, atau range) dan menerapkan expression untuk setiap item tersebut.","Contoh:","range(5) menghasilkan angka dari 0 hingga 4.","Untuk setiap i dalam range(5), i dimasukkan ke dalam list baru angka.","Hasilnya adalah list [0, 1, 2, 3, 4].","Sederhananya, kita bisa membuat list baru dengan expression(ekspresi atau perhitungan) berdasarkan item yang diambil dari iterable(seperti list atau range)."]},{"l":"Kelebihan List Comprehension","p":["Lebih ringkas: Mengurangi jumlah kode yang ditulis.","Lebih mudah dibaca: Kalau digunakan dengan benar, list comprehension bisa membuat kode lebih bersih.","Efisien: Dalam beberapa kasus, list comprehension bisa lebih cepat daripada loop biasa."]},{"l":"Contoh List Comprehension","p":["Mari kita lihat beberapa contoh sederhana untuk memahami bagaimana list comprehension bekerja."]},{"l":"Membuat List dari Range","p":["Kita bisa membuat list dari range angka dengan cara yang sangat mudah menggunakan list comprehension:","Penjelasan:","range(10) menghasilkan angka dari 0 hingga 9.","for i in range(10) mengambil setiap angka i dari range tersebut.","i dimasukkan ke dalam list baru angka.","Hasilnya adalah list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]."]},{"l":"Menambahkan Operasi pada List Comprehension","p":["Kamu juga bisa melakukan operasi matematika di dalam list comprehension:","Penjelasan:","i**2 adalah ekspresi matematika yang artinya \"i pangkat 2\" atau \"i kuadrat\".","for i in range(5) mengambil angka dari 0 hingga 4.","Setiap angka i dikalikan dengan dirinya sendiri ( i**2), lalu hasilnya dimasukkan ke dalam list kuadrat.","Hasilnya adalah list [0, 1, 4, 9, 16], yaitu kuadrat dari angka-angka 0 sampai 4."]},{"i":"list-comprehension-dengan-kondisi-if","l":"List Comprehension dengan Kondisi (If)","p":["List comprehension juga bisa menggunakan kondisi(if) untuk menyaring elemen-elemen tertentu.","Contoh: Membuat list hanya dengan angka genap dari range 0 sampai 9.","Penjelasan:","for i in range(10) mengambil angka dari 0 hingga 9.","if i % 2 == 0 adalah kondisi yang hanya akan memasukkan angka ke dalam list jika i adalah genap. ( i % 2 == 0 artinya \"i dibagi 2 sisanya 0\", yaitu bilangan genap).","Hasilnya adalah list [0, 2, 4, 6, 8], yang hanya berisi angka-angka genap dari range 0 sampai 9."]},{"l":"List Comprehension dengan If-Else","p":["Kalau kamu ingin menambahkan if-else dalam list comprehension, kamu bisa menulisnya seperti ini:","Penjelasan:","for i in range(5) menghasilkan angka dari 0 hingga 4.","[genap if i % 2 == 0 else ganjil for i in range(5)] berarti:","Jika i adalah genap ( i % 2 == 0), tambahkan string genap ke dalam list.","Jika tidak, tambahkan string ganjil.","Hasilnya adalah list ['genap', 'ganjil', 'genap', 'ganjil', 'genap'], sesuai apakah angka dari 0 sampai 4 itu genap atau ganjil."]},{"i":"list-comprehension-dengan-nested-loops-loop-bersarang","l":"List Comprehension dengan Nested Loops (Loop Bersarang)","p":["List comprehension juga bisa digunakan dengan nested loop. Misalnya, kita ingin membuat list dari hasil perkalian dua angka dari dua range berbeda:","Penjelasan:","for i in range(1, 4) adalah loop pertama yang menghasilkan angka 1, 2, dan 3.","for j in range(1, 4) adalah loop kedua di dalam loop pertama yang juga menghasilkan angka 1, 2, dan 3.","i*j berarti hasil perkalian antara i dari loop pertama dan j dari loop kedua.","Hasilnya adalah list [1, 2, 3, 2, 4, 6, 3, 6, 9], yaitu hasil dari semua kombinasi perkalian antara i dan j.","Ini setara dengan loop bersarang yang menambahkan hasil perkalian ke dalam list perkalian.","Ini setara dengan:","Loop pertama ( for i in range(1, 4)) mengambil angka 1 hingga 3.","Loop kedua ( for j in range(1, 4)) juga mengambil angka 1 hingga 3 untuk setiap i.","perkalian.append(i * j) menambahkan hasil perkalian i dan j ke dalam list perkalian.","Hasil akhirnya adalah list [1, 2, 3, 2, 4, 6, 3, 6, 9]."]},{"l":"Menggunakan List Comprehension untuk Mengubah String","p":["Kamu juga bisa menggunakan list comprehension untuk mengubah atau memanipulasi string.","Contoh: Membuat list berisi huruf besar dari string tertentu.","Penjelasan:","for huruf in teks mengambil setiap huruf dari string python.","huruf.upper() mengubah huruf tersebut menjadi huruf besar.","Setiap huruf besar dimasukkan ke dalam list huruf_besar.","Hasilnya adalah list ['P', 'Y', 'T', 'H', 'O', 'N']."]},{"i":"contoh-lain-mengubah-list","l":"Contoh Lain: Mengubah List","p":["List comprehension sangat berguna untuk memodifikasi list yang sudah ada. Misalnya, kita ingin membuat list baru dengan hanya angka positif dari list yang berisi angka campuran:","Penjelasan:","for i in angka mengambil setiap elemen i dari list angka, yang berisi angka negatif, nol, dan positif.","if i 0 adalah kondisi yang hanya akan memasukkan angka ke dalam list baru jika i lebih besar dari 0 (angka positif).","Hasilnya adalah list [1, 2, 3], yang hanya berisi angka-angka positif dari list awal."]},{"l":"Menggunakan Fungsi di Dalam List Comprehension","p":["List comprehension juga bisa mengandung fungsi di dalamnya. Misalnya, kita ingin membuat list yang berisi panjang dari setiap kata dalam sebuah list kata.","Penjelasan:","for k in kata mengambil setiap kata k dari list kata.","len(k) menghitung panjang dari string k.","Hasilnya adalah list [4, 5, 6], yang merupakan panjang dari masing-masing kata apel, jeruk, dan mangga."]},{"l":"Kesimpulan","p":["List Comprehension adalah cara singkat untuk membuat list berdasarkan loop.","Kamu bisa melakukan operasi, menambahkan kondisi, bahkan nested loops di dalam list comprehension.","Ini membuat kode kamu lebih ringkas dan efisien, namun tetap harus dipakai dengan bijak agar tetap mudah dibaca.","List comprehension ini memang sangat bermanfaat kalau kamu ingin menulis kode yang pendek, rapi, dan efisien."]}],[{"l":"Contoh Kode"},{"l":"List"},{"l":"Tuple"},{"l":"Dictionary"},{"l":"Set"},{"l":"List Comprehension"}]]