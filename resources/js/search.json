[[{"l":"Pemrograman Lanjut dengan Python","p":["Selamat datang di Praktikum Pemrograman Lanjut dengan Python! Di sini, kalian akan menemukan berbagai materi praktikum dan sumber daya yang dirancang untuk membantu kalian menguasai Python dengan cara yang menyenangkan dan efektif.","\"The only way to learn a new programming language is by writing programs in it. — Dennis Ritchie\"","Itu sebabnya, di sini kamu akan menemukan berbagai tantangan dan latihan yang dirancang untuk membantumu menulis kode dan memahami konsep dengan lebih baik. Jangan ragu untuk menjelajahi semua materi dan mencoba hal-hal baru. Ingat, proses belajar adalah perjalanan yang penuh petualangan!"]},{"i":"tips--trik","l":"Tips & Trik","p":["Belajar Python itu seru, apalagi kalau kamu tahu beberapa trik jitu. Yuk, simak beberapa tips yang bisa bikin proses belajar kamu jadi lebih mudah dan menyenangkan!"]},{"l":"Mulai dari Dasar-dasar","p":["Pahami Sintaks Dasar: Sebelum melangkah jauh, pastikan kamu tahu dasar-dasarnya dulu. Seperti variabel, tipe data, dan operator. Ini penting banget buat membangun fondasi yang kuat.","Gunakan Platform Interaktif: Platform seperti Codecademy atau Learn Python the Hard Way bisa bantu kamu belajar dengan cara yang interaktif dan fun!"]},{"i":"latihan-latihan-latihan","l":"Latihan, Latihan, Latihan!","p":["Coding Setiap Hari: Cobalah untuk nulis kode setiap hari. Gak perlu lama, yang penting konsisten. Semakin sering kamu berlatih, semakin jago kamu!","Proyek Kecil: Mulai dengan proyek-proyek kecil, seperti bikin kalkulator atau game sederhana. Ini bakal bikin kamu lebih paham dan merasa lebih siap!"]},{"l":"Manfaatkan Dokumentasi dan Referensi","p":["Baca Dokumentasi Resmi: Dokumen resmi Python ( docs.python.org) adalah teman baik kamu. Selalu bisa diandalkan kalau kamu bingung.","Buku dan Tutorial: Buku seperti \"Automate the Boring Stuff with Python\" atau video tutorial di YouTube bisa jadi panduan yang jelas dan terstruktur."]},{"l":"Belajar dari Kode Orang Lain","p":["Baca Kode Open Source: Cek proyek open source di GitHub untuk melihat cara orang lain nulis kode. Ini bisa ngasih kamu ide baru dan trik-trik keren.","Gabung Komunitas: Bergabung dengan forum atau komunitas Python seperti Stack Overflow atau Reddit bisa bikin kamu dapat tips dan bantuan dari sesama pengembang."]},{"l":"Gunakan Alat Bantu","p":["Pilih IDE yang Tepat: Gunakan IDE seperti PyCharm atau editor seperti Visual Studio Code. Ini bakal bikin coding jadi lebih gampang.","Linting dan Format Kode: Gunakan alat seperti pylint atau black untuk menjaga kode tetap rapi dan sesuai standar."]},{"l":"Eksplorasi Konsep Lanjutan","p":["Pelajari Data Structures dan Algorithms: Mengerti struktur data seperti list, tuple, set, dan dictionary, serta algoritma dasar bakal bikin kamu lebih mahir dalam menyelesaikan masalah.","Coba Framework dan Library: Pelajari framework seperti Flask atau Django untuk pengembangan web, dan library seperti NumPy dan Pandas untuk analisis data."]},{"l":"Debugging dan Testing","p":["Gunakan Debugger: Alat debugging di IDE bisa bantu kamu menemukan dan memperbaiki kesalahan dengan lebih mudah.","Tulis Tes Unit: Dengan menulis tes unit menggunakan pytest, kamu bisa memastikan kode kamu bekerja dengan baik dan menghindari bug."]},{"l":"Selalu Terupdate","p":["Ikuti Berita Terbaru: Teknologi berubah cepat. Ikuti berita dan perkembangan terbaru di Python untuk tetap up-to-date dengan fitur dan alat terbaru.","Terus Belajar: Jangan berhenti belajar! Selalu cari cara untuk meningkatkan keterampilan kamu dan coba teknik baru yang menarik."]},{"l":"Gunakan Chatbot AI sebagai Bantuan","p":["Tanya Apa Saja: Bingung dengan konsep atau butuh penjelasan tambahan? Tanyakan saja ke ChatGPT! Dia bisa membantu menjelaskan konsep, memberikan contoh kode, dan memecahkan masalah.","Kode dan Debug: Jika kamu mengalami masalah dengan kode atau butuh bantuan debugging, kirimkan kode kamu dan AI akan bantu cari solusinya.","Sumber Daya dan Rekomendasi: Butuh rekomendasi buku, tutorial, atau alat bantu? AI bisa merekomendasikan sumber daya yang sesuai dengan kebutuhanmu.","Semoga tips ini membantu kamu dalam belajar Python! Selamat coding dan jangan lupa bersenang-senang! \uD83C\uDF89"]},{"l":"Sumber Daya Tambahan","p":["Dokumentasi Resmi Python: Referensi lengkap dan otoritatif.","Forum Diskusi Python: Bergabunglah dengan komunitas Python untuk bertanya dan berbagi pengetahuan.","Happy Coding! ✨"]}],[{"l":"Pengantar Python"},{"l":"Pengenalan Pemrograman","p":["Pemrograman ( programming) ibarat memberikan instruksi atau perintah kepada komputer untuk melakukan tugas tertentu. Bayangkan komputer itu seperti asisten yang sangat pintar, tapi dia hanya bisa melakukan apa yang kamu perintahkan secara tepat. Misalnya, jika kamu ingin asistenmu menghitung nilai matematika atau menganalisis data, kamu harus memberitahunya dengan jelas apa yang harus dilakukan.","Ilustrasi Pemrograman: Komputer bertindak seperti asisten yang menjalankan instruksi yang diberikan oleh programmer","Di dunia matematika, pemrograman sangat berguna. Kamu bisa menggunakan kode untuk melakukan perhitungan rumit, menganalisis data besar, atau bahkan memvisualisasikan grafik. Dengan kata lain, pemrograman bisa membantu kamu mengerjakan tugas-tugas matematika yang sulit dengan lebih cepat dan efisien."]},{"l":"Pengenalan Python","p":["Python adalah salah satu bahasa pemrograman yang sangat populer dan mudah dipelajari, terutama untuk pemula. Dengan sintaks yang sederhana dan kemampuan untuk menangani berbagai tugas, Python adalah pilihan yang tepat untuk mulai belajar pemrograman."]},{"i":"kenapa-python","l":"Kenapa Python?","p":["Sederhana dan Mudah Dipahami, seperti menulis kalimat dalam bahasa sehari-hari.","Kuat dan serbaguna, bisa digunakan untuk banyak hal, mulai dari perhitungan matematika hingga pembuatan AI."]},{"i":"tipe-data-variabel-dan-operator","l":"Tipe Data, Variabel dan Operator"},{"l":"Tipe Data","p":["Sebelum kita membahas lebih jauh tentang variabel, mari kita pahami terlebih dahulu apa itu tipe data. Tipe data adalah jenis data yang bisa kamu simpan dalam variabel. Di Python, ada beberapa tipe data dasar yang sering digunakan."]},{"i":"tipe-data-dasar-di-python","l":"Tipe Data Dasar di Python:","p":["Integer ( int): Bilangan bulat tanpa desimal. Misalnya, 10, -3, 0.","Float ( float): Bilangan desimal. Misalnya, 3.14, -0.5, 2.0.","String ( str): Teks atau rangkaian karakter. Misalnya, Python, 123, 'Hello World!'.","Boolean ( bool): Nilai benar atau salah, yaitu True atau False."]},{"l":"Variabel","p":["Bayangkan variabel itu seperti kotak penyimpanan yang bisa kamu beri nama. Di dalam kotak ini, kamu bisa menyimpan berbagai jenis data, seperti angka atau teks. Tipe data menentukan jenis informasi yang bisa disimpan dalam variabel tersebut."]},{"i":"contoh","l":"Contoh:","p":["Penjelasan:","x, y, dan name adalah nama kotak (variabel) yang kita gunakan untuk menyimpan data.","x menyimpan angka bulat, yang disebut sebagai integer.","y menyimpan angka desimal, yang disebut sebagai float.","name menyimpan teks, yang disebut sebagai string.","is_active menyimpan nilai benar atau salah, yang disebut sebagai boolean.","Kamu bisa menggunakan nama yang sesuai dengan isi kotaknya. Misalnya, jika kamu ingin menyimpan nama seseorang, menggunakan nama variabel seperti name akan lebih masuk akal daripada menggunakan nama yang tidak relevan seperti x atau y."]},{"l":"Operator","p":["Operator adalah simbol yang digunakan untuk melakukan operasi pada data dalam variabel. Misalnya, jika kamu ingin menjumlahkan dua angka atau membandingkan dua nilai, kamu akan menggunakan operator."]},{"i":"contoh-1","l":"Contoh:","p":["Penjelasan:","Operator aritmatika melakukan operasi matematika dasar.","Operator pembanding digunakan untuk membandingkan dua nilai.","Operator logika digunakan untuk menggabungkan atau membalik kondisi."]},{"i":"kondisi-if-else","l":"Kondisi (If-Else)","p":["Dengan kondisi, kamu bisa membuat komputer membuat keputusan. Misalnya, kamu bisa memberi tahu komputer untuk melakukan sesuatu jika suatu kondisi tertentu terpenuhi."]},{"l":"Struktur If-Else"},{"i":"contoh-2","l":"Contoh:","p":["Penjelasan:","if digunakan untuk mengecek apakah suatu kondisi benar. Jika ya, maka blok kode di bawahnya akan dijalankan.","elif(else if) digunakan jika kondisi pertama tidak terpenuhi dan kamu ingin mengecek kondisi lainnya.","else digunakan untuk kondisi di luar if dan elif."]},{"i":"loop-pengulangan","l":"Loop (Pengulangan)","p":["Loop memungkinkan kamu untuk menjalankan bagian kode berulang kali. Misalnya, jika kamu ingin menghitung total dari beberapa angka, kamu bisa menggunakan loop."]},{"l":"For Loop","p":["For loop digunakan untuk mengulangi blok kode untuk setiap item dalam urutan."]},{"i":"contoh-3","l":"Contoh:","p":["Penjelasan:","range(1, 6) menghasilkan urutan angka dari 1 hingga 5.","for loop mengulangi blok kode untuk setiap angka dalam urutan."]},{"l":"While Loop","p":["While loop digunakan untuk mengulangi blok kode selama kondisi tertentu benar."]},{"i":"contoh-4","l":"Contoh:","p":["Penjelasan:","while loop terus mengulangi blok kode selama n lebih besar dari 0.","Faktorial dihitung dengan mengalikan faktorial dengan n dan kemudian mengurangi n hingga mencapai 0."]},{"l":"Fungsi","p":["Fungsi adalah cara untuk mengorganisir kode kamu dengan membuat blok kode yang bisa dipanggil berkali-kali. Ini membantu untuk membuat kode lebih bersih dan terstruktur."]},{"l":"Mendefinisikan dan Memanggil Fungsi"},{"i":"contoh-5","l":"Contoh:","p":["Penjelasan:","Fungsi kuadrat menerima satu parameter x dan mengembalikan x kuadrat.","Kamu bisa memanggil fungsi ini dengan memberikan nilai untuk x dan mendapatkan hasilnya."]},{"l":"Fungsi dengan Beberapa Parameter"},{"i":"contoh-6","l":"Contoh:","p":["Penjelasan:","Fungsi luas_segitiga menerima dua parameter, alas dan tinggi, dan mengembalikan luas segitiga.","Kamu bisa memanggil fungsi ini dengan memberikan nilai untuk alas dan tinggi."]},{"l":"Komentar","p":["Komentar adalah catatan atau penjelasan dalam kode yang tidak dijalankan oleh komputer. Mereka berguna untuk menulis informasi atau catatan tentang kode agar lebih mudah dipahami oleh orang lain (atau diri sendiri di masa depan)."]},{"i":"kenapa-komentar-penting","l":"Kenapa Komentar Penting?","p":["Menjelaskan Kode: Komentar bisa menjelaskan apa yang dilakukan oleh kode atau mengapa kode tersebut ditulis dengan cara tertentu.","Memudahkan Pemeliharaan: Ketika kamu atau orang lain kembali ke kode setelah beberapa waktu, komentar bisa membantu memahami apa yang sudah dilakukan tanpa harus membaca setiap baris kode dengan teliti."]},{"l":"Cara Menulis Komentar di Python","p":["Di Python, ada dua cara untuk menulis komentar:","Komentar Satu Baris: Komentar ini dimulai dengan tanda #. Semua yang ada setelah # pada baris tersebut dianggap sebagai komentar dan tidak akan dieksekusi oleh Python.","Komentar Beberapa Baris: Jika kamu perlu menulis komentar yang lebih panjang atau beberapa baris komentar, kamu bisa menggunakan tanda kutip tiga ( atau ''') untuk membuat komentar multi-baris.","Penjelasan:","Komentar ini dimulai dengan tiga tanda kutip ganda () dan diakhiri dengan tiga tanda kutip ganda. Python akan mengabaikan semua teks di antara tanda kutip ini."]},{"l":"Tips untuk Menulis Komentar","p":["Jangan berlebihan. Jangan terlalu banyak berkomentar. Jika kode sudah jelas, komentar yang berlebihan malah bisa membuat bingung.","Jelaskan logika, bukan sintaks. Fokuskan komentar pada logika dan alasan di balik kode, bukan hanya menjelaskan sintaks dasar yang sudah jelas."]}],[{"l":"Contoh Kode Python Dasar"}],[{"i":"pemrograman-berorientasi-objek-oop","l":"Pemrograman Berorientasi Objek (OOP)"},{"l":"Pengantar OOP","p":["Halo teman-teman! Selamat datang di materi Pemrograman Berorientasi Objek atau dalam bahasa Inggris disebut dengan Object Oriented Programming (OOP). Nah, kalian mungkin bertanya, OOP itu apa sih? OOP adalah cara kita memikirkan program sebagai kumpulan objek yang saling berinteraksi. Berbeda dengan pemrograman prosedural yang cenderung fokus pada rangkaian langkah atau instruksi, OOP lebih fokus pada objek-objek yang \"hidup\" dalam program kita.","Di sini kita akan belajar bagaimana membuat objek-objek itu menggunakan class dan bagaimana objek-objek itu dapat berinteraksi. Seru kan? Yuk, kita mulai dengan memahami dua hal penting: class dan object."]},{"l":"Class dan Object","p":["Oke, langsung aja! Dalam OOP, class adalah seperti cetak biru ( blueprint) dari suatu benda. Misalnya, kalian bisa bayangkan class itu seperti blueprint mobil. Dari blueprint ini, kita bisa bikin banyak mobil yang berbeda-beda. Mobil-mobil yang kita buat dari blueprint ini kita sebut sebagai object.","Jadi, intinya:","Class: Blueprint atau rancangannya.","Object: Barang hasil dari blueprint tersebut, yang \"hidup\" di dalam program."]},{"l":"Contoh Class dan Object di Python","p":["Kalian bisa lihat, kita sudah bikin dua object mobil1 dan mobil2 dari class Mobil. Mereka berbeda, tapi berasal dari blueprint yang sama!"]},{"l":"Membuat Class di Python","p":["Sekarang, yuk kita mulai mengisi class kita dengan atribut dan metode (fungsi-fungsi yang bisa dipakai oleh objek)."]},{"l":"Atribut dan Metode","p":["Dalam class, kita bisa punya atribut, yang menggambarkan sifat-sifat dari object, dan metode, yaitu fungsi yang bisa dijalankan oleh object.","Misalnya, class Mobil bisa punya atribut seperti warna, merek, dan kecepatan, serta metode untuk menjalankan atau menghentikan mobil."]},{"l":"Membuat Constructor dengan __init__","p":["Constructor adalah fungsi khusus dalam class yang otomatis dipanggil saat object baru dibuat. Biasanya kita menggunakannya untuk mengatur atribut-atribut awal."]},{"i":"apa-itu-self","l":"Apa itu self?","p":["Kalian pasti bertanya-tanya, apa sih self itu? Singkatnya, self merujuk pada object itu sendiri. Jadi setiap kali kita membuat object baru, self akan \"mengikat\" object tersebut ke atribut dan metode di dalam class.","Sebagai contoh:","self.merek merujuk ke atribut merek milik object yang spesifik (misal, mobil1 atau mobil2).","self.jalankan() berarti kita memanggil metode jalankan untuk object yang spesifik.","Baik, mari kita lanjutkan materi tentang cara membuat object dari class dan bagaimana cara mengakses atribut serta metode pada object."]},{"l":"Membuat Object dari Class","p":["Setelah kita punya class dengan atribut dan metode, saatnya kita membuat object dari class tersebut. Ini disebut dengan instansiasi, yaitu proses pembuatan object dari sebuah class."]},{"l":"Contoh Instansiasi Object","p":["Mari kita ambil contoh class Mobil yang sudah kita buat sebelumnya. Kita akan membuat beberapa mobil baru dari class tersebut.","Sekarang, mobil1 dan mobil2 adalah dua object berbeda yang berasal dari class Mobil. Mereka punya atribut yang berbeda (merek dan warna), tapi keduanya bisa melakukan hal yang sama, seperti jalankan dan berhenti."]},{"l":"Atribut dan Metode pada Object","p":["Setelah kita punya object, kita bisa mengakses atribut dan menggunakan metode yang ada di dalam class tersebut. Berikut adalah cara mengakses atribut dan metode dari object."]},{"l":"Mengakses Atribut Object","p":["Atribut dari sebuah object bisa diakses dengan menggunakan notasi titik (.). Misalnya, kita ingin melihat merek dan warna dari mobil1."]},{"l":"Memanggil Metode pada Object","p":["Selain atribut, kita juga bisa memanggil metode yang ada di dalam class. Seperti ini:","Di sini, metode jalankan() dipanggil untuk mobil1, dan metode berhenti() dipanggil untuk mobil2. Karena mereka adalah object yang berbeda, hasilnya juga spesifik untuk masing-masing object.","Saat kita membuat object dari sebuah class, kita bisa memodifikasi atribut object tersebut setelah object dibuat. Yuk kita bahas bagaimana caranya!"]},{"l":"Menambah Atribut Object","p":["Kita bisa menambahkan atribut baru ke object setelah object tersebut dibuat. Misalnya, kita ingin menambahkan atribut baru tahun pada object mobil1 yang belum ada sebelumnya."]},{"l":"Mengubah Atribut Object","p":["Atribut yang sudah ada bisa diubah dengan cara yang sama seperti menambah atribut. Misalnya, kita ingin mengubah warna mobil dari Merah menjadi Putih."]},{"l":"Menghapus Atribut Object","p":["Kita juga bisa menghapus atribut dari object dengan menggunakan kata kunci del. Misalnya, kita ingin menghapus atribut tahun dari mobil1.","Jadi, dengan ini, kita bisa membuat object yang lebih dinamis dan fleksibel!"]},{"l":"Best Practices dalam OOP","p":["Sekarang setelah kalian paham dasar-dasar OOP, yuk kita bahas beberapa best practices atau praktik terbaik dalam penggunaan OOP. Hal ini penting agar kode yang kalian buat mudah dipahami, dirawat, dan diperluas di masa mendatang."]},{"l":"Gunakan Nama Class dengan Huruf Kapital","p":["Biasanya, nama class ditulis dengan huruf kapital pada huruf pertama setiap kata, contohnya: Mahasiswa, Mobil, Lingkaran, dsb. Hal ini membuat kode lebih mudah dibaca dan mengikuti konvensi umum."]},{"l":"Pisahkan Logika dengan Menggunakan Metode","p":["Sebisa mungkin, masukkan logika atau tindakan-tindakan yang berhubungan dengan object ke dalam metode di dalam class. Jangan menaruh logika di luar class, karena ini akan memecah fokus dan membuat kode lebih sulit diikuti."]},{"l":"Jaga Atribut agar Konsisten","p":["Cobalah untuk menjaga atribut object konsisten di seluruh program. Misalnya, jika mobil punya atribut merek dan warna, pastikan semua object Mobil memiliki atribut ini. Jangan menambahkan atribut baru secara sembarangan, karena bisa membingungkan."]},{"l":"Gunakan Constructor untuk Inisialisasi","p":["Selalu gunakan constructor (__init__) untuk menetapkan nilai awal atribut object. Ini membuat object kalian lebih terstruktur dan jelas sejak awal."]},{"l":"Buat Kode Modular dan Reusable","p":["OOP sangat mendukung modularitas, di mana kalian bisa membuat class yang mudah digunakan kembali di berbagai bagian program. Buat class dan metode yang bersifat umum dan bisa digunakan di berbagai situasi."]},{"l":"Studi Kasus Sederhana","p":["Mari kita coba membuat sebuah studi kasus sederhana untuk lebih memahami konsep class dan object. Misalnya, kita akan membuat class Mahasiswa yang menggambarkan mahasiswa di sebuah universitas."]},{"l":"Contoh Class Mahasiswa","p":["Di sini, kita membuat class Mahasiswa dengan atribut nama, nim, dan jurusan. Setiap object mahasiswa bisa memperkenalkan diri dan belajar mata kuliah tertentu. Keren, kan?","Selamat mencoba! Kalian bisa bereksperimen dengan class dan object ini, membuat variasi object yang berbeda, dan melihat bagaimana OOP membantu menyederhanakan kode kalian."]}],[{"i":"contoh-kode-class--object","l":"Contoh Kode Class & Object"}],[{"i":"tugas-sistem-pengelolaan-data-mahasiswa","l":"Tugas: Sistem Pengelolaan Data Mahasiswa"},{"l":"Deskripsi Tugas","p":["Kalian diminta untuk membuat sebuah program Python yang dapat digunakan untuk mengelola data mahasiswa dalam sebuah kelas. Program ini akan memungkinkan pengguna untuk:","Menambahkan data mahasiswa.","Menampilkan data mahasiswa.","Menghitung rata-rata nilai dari semua mahasiswa.","Mencari mahasiswa dengan nilai tertinggi dan terendah.","Menampilkan mahasiswa yang lulus atau tidak lulus (nilai >= 60 lulus)."]},{"l":"Kriteria Program"},{"i":"1-buat-class-mahasiswa-yang-memiliki-atribut","l":"1. Buat class Mahasiswa yang memiliki atribut:","p":["nama: Nama mahasiswa.","nim: Nomor Induk Mahasiswa.","nilai: Nilai akhir mahasiswa (integer)."]},{"i":"2-class-mahasiswa-harus-memiliki-metode","l":"2. Class Mahasiswa harus memiliki metode:","p":["deskripsi(): Menampilkan data mahasiswa (nama, NIM, nilai).","status_kelulusan(): Menampilkan status kelulusan (Lulus jika nilai >= 60, Tidak Lulus jika nilai < 60)."]},{"i":"3-buat-class-kelas-yang-memiliki-atribut","l":"3. Buat class Kelas yang memiliki atribut:","p":["daftar_mahasiswa: List untuk menyimpan object Mahasiswa yang sudah dibuat. Clue: sintaks untuk membuat list dalam class \"Kelas\" adalah: self.daftar_mahasiswa = []."]},{"i":"4-class-kelas-harus-memiliki-metode","l":"4. Class Kelas harus memiliki metode:","p":["tambah_mahasiswa(mahasiswa): Menambahkan object Mahasiswa ke dalam list daftar_mahasiswa. Clue: sintaks untuk menambahkan object ke dalam list adalah: self.daftar_mahasiswa.append(mahasiswa).","tampilkan_semua_mahasiswa(): Menampilkan semua data mahasiswa dalam kelas. Clue: gunakan perulangan for untuk menampilkan data mahasiswa. Misalnya, for mahasiswa in self.daftar_mahasiswa: print(mahasiswa.deskripsi()).","hitung_rata_rata_nilai(): Menghitung dan menampilkan rata-rata nilai mahasiswa dalam kelas. Clue: gunakan fungsi sum() untuk menjumlahkan nilai-nilai mahasiswa dan len() untuk menghitung jumlah mahasiswa.","cari_nilai_tertinggi(): Menampilkan mahasiswa dengan nilai tertinggi. Clue: gunakan fungsi max() untuk mencari nilai tertinggi.","cari_nilai_terendah(): Menampilkan mahasiswa dengan nilai terendah. Clue: gunakan fungsi min() untuk mencari nilai terendah."]},{"l":"Persyaratan Tambahan","p":["Gunakan looping(perulangan) dan if-else untuk mengecek status kelulusan mahasiswa dan menampilkan hasilnya.","Pastikan tipe data yang digunakan untuk atribut sudah sesuai (contoh: nilai harus berupa integer). Clue: gunakan fungsi int() untuk mengubah input menjadi integer.","Buatlah validasi sederhana agar nilai yang dimasukkan harus berada dalam rentang 0-100. Clue: gunakan pernyataan if untuk mengecek nilai yang dimasukkan. Misalnya, jika nilai < 0, maka nilai = 0. Jika nilai > 100, maka nilai = 100."]},{"l":"Panduan Penyelesaian"},{"l":"1. Class Mahasiswa","p":["Buat class Mahasiswa yang memiliki atribut nama, NIM, dan nilai.","Buat metode deskripsi() untuk menampilkan detail mahasiswa dan metode status_kelulusan() untuk mengecek apakah mahasiswa lulus atau tidak. Anda bisa memanggil self.status_kelulusan() di dalam metode deskripsi()."]},{"l":"2. Class Kelas","p":["Buat class Kelas yang menyimpan daftar mahasiswa dalam list.","Implementasikan metode untuk menambah mahasiswa, menampilkan semua data mahasiswa, menghitung rata-rata nilai, dan mencari nilai tertinggi serta terendah."]},{"l":"Contoh Hasil Eksekusi"},{"l":"Ketentuan Pengumpulan"},{"l":"Deadline","p":["Kumpulkan tugas kalian dalam bentuk file Python (.py) ke dalam Google Classroom paling lambat Senin, 16 September 2024 pukul 23.59 WIB.","Selamat mengerjakan, dan jangan ragu untuk bertanya jika ada yang kurang jelas. Tetap semangat!"]},{"i":"nama-file","l":"Nama File:","p":["Tugas1_NIM_Nama.py"]}],[{"l":"Inheritance"},{"i":"apa-itu-inheritance","l":"Apa Itu Inheritance?","p":["Bayangkan kamu punya keluarga besar. Sifat dan kebiasaan tertentu dari orang tua bisa diwariskan ke anak. Dalam dunia kode, kita punya konsep inheritance atau pewarisan, yang artinya kelas child(anak) bisa mewarisi properti atau metode dari kelas parent(orang tua), sehingga kita tidak perlu menulis ulang hal yang sama."]},{"i":"contoh-kasus-sederhana","l":"Contoh Kasus Sederhana:","p":["Kita akan mulai dengan membuat kelas Person, yaitu kelas parent yang punya dua atribut: name dan id. Kemudian kita tambahkan metode untuk menampilkan nama dan ID.","Penjelasan Kode:","__init__: Merupakan constructor yang dipanggil saat objek dibuat. Ini berfungsi untuk menginisialisasi atribut seperti name dan id.","display(): Metode yang menampilkan nilai dari name dan id dalam format kalimat.","Sekarang, kita buat objek Person:","Penjelasan: Di sini kita membuat objek person dengan nama Siti dan ID 123, kemudian memanggil metode display() untuk menampilkan informasi person tersebut.","Output:"]},{"l":"Membuat Kelas Anak yang Mewarisi dari Kelas Parent","p":["Sekarang kita buat kelas anak, yaitu Employee, yang mewarisi dari Person. Kelas ini akan memiliki semua atribut dan metode yang dimiliki oleh Person.","Penjelasan Kode:","class Employee(Person):: Menandakan bahwa Employee adalah kelas anak yang mewarisi dari kelas Person.","print_employee(): Metode tambahan khusus untuk kelas Employee.","Sekarang kita buat objek dari kelas Employee dan lihat bagaimana ia mewarisi metode dari Person.","Penjelasan:","pegawai.display(): Memanggil metode display() dari kelas Person, menunjukkan bahwa Employee mewarisi semua metode Person.","pegawai.print_employee(): Memanggil metode khusus yang hanya ada di Employee.","Output:"]},{"i":"menggunakan-super-untuk-memanggil-konstruktor-kelas-parent","l":"Menggunakan super() untuk Memanggil Konstruktor Kelas Parent","p":["Jika kamu ingin menambahkan lebih banyak properti ke kelas anak, tapi tetap ingin menggunakan properti dari kelas parent, kamu bisa menggunakan fungsi super() untuk memanggil konstruktor orang tua.","Contohnya, mari kita tambahkan atribut salary(gaji) dan position(jabatan) ke kelas Employee, tapi tetap ingin name dan id diwarisi dari kelas Person.","Penjelasan Kode:","super().__init__(name, idnumber): Memanggil konstruktor dari kelas parent, yaitu Person, untuk menginisialisasi atribut name dan idnumber.","self.salary dan self.position: Atribut tambahan yang ditambahkan khusus untuk kelas Employee.","print(): Menampilkan informasi lengkap tentang objek Employee dalam bentuk kalimat.","Output:"]},{"l":"Jenis-jenis Inheritance di Python","p":["Inheritance di Python juga memiliki berbagai bentuk, mirip dengan hubungan keluarga. Mari kita bahas satu per satu dengan contoh."]},{"i":"1-single-inheritance-anak-mewarisi-dari-satu-orang-tua-saja","l":"1. Single Inheritance: Anak mewarisi dari satu orang tua saja.","p":["Penjelasan Kode:","Employee mewarisi dari satu kelas, yaitu Person.","Employee menambahkan atribut department dan metode display_employee().","Output:"]},{"i":"2-multiple-inheritance-anak-bisa-mewarisi-dari-lebih-dari-satu-orang-tua","l":"2. Multiple Inheritance: Anak bisa mewarisi dari lebih dari satu orang tua.","p":["Penjelasan Kode:","Derived mewarisi dari dua kelas, Base1 dan Base2.","Konstruktor Derived memanggil konstruktor dari kedua kelas induk.","Metode printStrs() menampilkan atribut dari kedua kelas induk.","Output:"]},{"i":"3-multilevel-inheritance-seperti-hubungan-kakek-ayah-dan-anak-dimana-anak-mewarisi-dari-orang-tua-dan-orang-tua-mewarisi-dari-kakek","l":"3. Multilevel Inheritance: Seperti hubungan kakek, ayah, dan anak, dimana anak mewarisi dari orang tua, dan orang tua mewarisi dari kakek.","p":["Penjelasan Kode:","Child mewarisi dari Parent, yang juga mewarisi dari Grandparent.","Dengan menggunakan super(), setiap kelas memanggil konstruktor dari kelas induknya untuk menginisialisasi atribut yang diwariskan.","Metode display_info() menampilkan semua atribut yang dimiliki oleh Child dalam bentuk kalimat.","Output:"]},{"i":"4-hierarchical-inheritance-satu-kelas-orang-tua-bisa-punya-beberapa-anak","l":"4. Hierarchical Inheritance: Satu kelas orang tua bisa punya beberapa anak.","p":["Penjelasan Kode:","Child1 dan Child2 keduanya mewarisi dari kelas Parent.","Masing-masing kelas anak menambahkan atribut dan metode spesifik mereka sendiri.","Objek anak1 dan anak2 memanfaatkan atribut dan metode dari kelas induk Parent serta atribut dan metode mereka sendiri.","Output:"]},{"i":"5-hybrid-inheritance-kombinasi-dari-berbagai-jenis-inheritance-di-atas","l":"5. Hybrid Inheritance: Kombinasi dari berbagai jenis inheritance di atas.","p":["Penjelasan Kode:","Child1 mewarisi dari Parent1.","Child2 mewarisi dari Parent1 dan Parent2(multiple inheritance).","Ini adalah contoh Hybrid Inheritance yang menggabungkan single dan multiple inheritance.","Setiap kelas anak menambahkan atribut dan metode spesifik mereka sendiri.","Output:"]},{"l":"Contoh Penggunaan Inheritance","p":["Kamu bisa juga menambahkan properti khusus di kelas anak. Misalnya, kita punya kelas Person dan kita ingin menambahkan tanggal lahir di kelas anak:","Penjelasan Kode:","Student mewarisi dari Person dan menambahkan atribut dob(tanggal lahir).","Menggunakan super().__init__(name, age) untuk menginisialisasi atribut dari kelas Person.","Metode display_info() menampilkan semua atribut, termasuk yang baru ditambahkan, dalam bentuk kalimat.","Output:"]}],[{"l":"Encapsulation"},{"i":"apa-itu-encapsulation","l":"Apa Itu Encapsulation?","p":["Bayangkan kamu bekerja di sebuah perusahaan besar dengan berbagai divisi seperti akuntansi, keuangan, dan penjualan. Setiap divisi memiliki data dan tugasnya sendiri yang perlu dijaga kerahasiaannya. Encapsulation atau enkapsulasi dalam pemrograman berorientasi objek (OOP) adalah konsep yang mirip dengan situasi ini. Enkapsulasi melibatkan pembungkusan data (atribut) dan metode (fungsi) yang bekerja pada data tersebut dalam satu unit, yaitu kelas. Ini membantu melindungi data dari akses langsung dan modifikasi yang tidak disengaja."]},{"i":"manfaat-encapsulation","l":"Manfaat Encapsulation:","p":["Pengamanan Data: Melindungi data dari perubahan yang tidak diinginkan dari luar kelas.","Informasi Tersembunyi: Menyembunyikan detail implementasi internal dan hanya menampilkan antarmuka yang diperlukan.","Kontrol Akses: Mengatur siapa yang bisa mengakses atau memodifikasi data tertentu.","Pemeliharaan Mudah: Memudahkan perubahan implementasi internal tanpa mempengaruhi kode yang menggunakan kelas tersebut."]},{"i":"jenis-jenis-anggota-kelas-dalam-enkapsulasi","l":"Jenis-Jenis Anggota Kelas dalam Enkapsulasi:","p":["Public Members: Anggota yang dapat diakses dari mana saja.","Protected Members: Anggota yang seharusnya hanya diakses dalam kelas itu sendiri dan kelas turunannya.","Private Members: Anggota yang hanya dapat diakses dalam kelas itu sendiri."]},{"l":"Public Members","p":["Public members adalah anggota kelas yang dapat diakses dari mana saja, baik di dalam maupun di luar kelas."]},{"i":"contoh-public-members","l":"Contoh Public Members:","p":["Penjelasan Kode:","self.brand dan self.model adalah public members yang dapat diakses dari luar kelas.","Metode display_info() menampilkan informasi tentang mobil.","Output:"]},{"l":"Protected Members","p":["Protected members adalah anggota kelas yang seharusnya hanya diakses di dalam kelas itu sendiri dan kelas turunannya. Di Python, kita menggunakan satu garis bawah (_) sebagai konvensi untuk menandakan bahwa anggota tersebut adalah protected."]},{"i":"contoh-protected-members","l":"Contoh Protected Members:","p":["Penjelasan Kode:","self._a: Menandakan bahwa atribut _a adalah anggota protected.","Derived mewarisi dari Base dan dapat mengakses serta memodifikasi atribut _a.","Meskipun anggota protected dapat diakses dari luar kelas, disarankan untuk tidak melakukannya.","Output:"]},{"l":"Private Members","p":["Private members adalah anggota kelas yang tidak dapat diakses dari luar kelas maupun dari kelas turunannya. Di Python, kita menggunakan dua garis bawah (__) sebagai konvensi untuk menandakan bahwa anggota tersebut adalah private. Python menggunakan name mangling untuk menyembunyikan atribut ini."]},{"i":"contoh-private-members","l":"Contoh Private Members:","p":["Penjelasan Kode:","self.__c: Menandakan bahwa atribut __c adalah anggota private.","Metode display_private() di kelas Base dapat mengakses __c.","Kelas Derived mencoba mengakses atribut __c, tetapi akan menghasilkan error karena __c adalah private.","Mengakses __c dari objek Base juga akan menghasilkan error.","Output:"]},{"l":"Contoh Penggunaan Encapsulation","p":["Mari kita lihat contoh yang lebih lengkap di mana kita menggunakan enkapsulasi untuk mengatur akses ke atribut dan metode dalam kelas.","Penjelasan Kode:","self.name: Public member yang dapat diakses dari mana saja.","self._age: Protected member yang dapat diakses di dalam kelas dan kelas turunannya.","self.__dob: Private member yang hanya dapat diakses di dalam kelas Person.","Metode get_dob() dan set_dob() digunakan untuk mengakses dan mengubah atribut private __dob.","Kelas Student mewarisi dari Person dan dapat mengakses protected member _age.","Mengakses private member __dob langsung dari luar kelas akan menghasilkan error.","Output:","Dengan menggunakan metode getter dan setter, kita dapat mengontrol bagaimana atribut private diakses dan dimodifikasi, menjaga integritas data dan mencegah perubahan yang tidak diinginkan dari luar kelas."]}],[{"l":"Polymorphism"},{"i":"apa-itu-polymorphism","l":"Apa Itu Polymorphism?","p":["Bayangkan kamu punya sebuah remote TV universal. Remote ini bisa digunakan untuk mengontrol berbagai perangkat—TV, DVD player, atau speaker. Meskipun kamu hanya menggunakan satu remote, tombol-tombol di remote itu bisa memiliki fungsi yang berbeda tergantung perangkat mana yang sedang kamu kontrol. Misalnya, tombol volume akan menambah volume pada TV, tapi pada speaker, tombol yang sama akan mengubah sumber input.","Di dunia pemrograman, Polymorphism bekerja dengan cara yang sama. Polimorfisme memungkinkan kita menggunakan metode atau fungsi dengan nama yang sama, tapi fungsinya bisa berbeda tergantung pada tipe data atau objek yang sedang kita tangani. Jadi, seperti halnya remote TV universal, metode yang sama bisa \"berfungsi\" berbeda pada konteks yang berbeda."]},{"l":"Polymorphism dengan Fungsi Bawaan","p":["Python punya banyak fungsi bawaan yang sudah mendukung polimorfisme. Salah satu contohnya adalah fungsi len(). Fungsi ini bisa menghitung panjang berbagai tipe data, seperti string dan list.","Penjelasan:","len(hello) mengembalikan panjang string, yaitu 5 karena ada 5 huruf.","len([1, 2, 3, 4]) menghitung jumlah elemen dalam list, yaitu 4.","Polimorfisme di sini terjadi karena meskipun len() digunakan untuk string dan list, hasilnya tetap sesuai dengan tipe datanya. Keren, kan?"]},{"l":"Polymorphism dengan Fungsi Buatan Sendiri","p":["Kita juga bisa membuat fungsi polimorfik kita sendiri, yang bisa bekerja dengan jumlah argumen berbeda. Contohnya, kita bisa membuat fungsi tambah yang bisa menjumlahkan dua atau tiga angka.","Penjelasan:","Ketika kita memanggil add(3, 4), fungsi hanya menggunakan dua angka karena argumen ketiga punya nilai default 0.","Ketika kita memanggil add(3, 4, 5), fungsi menjumlahkan ketiga angkanya.","Nah, kamu bisa lihat bahwa fungsi ini bisa beradaptasi dengan jumlah argumen yang diberikan. Ini adalah contoh praktis bagaimana polimorfisme bekerja di fungsi buatan sendiri."]},{"l":"Polymorphism dengan Kelas dan Metode","p":["Di dunia nyata, kita sering bekerja dengan objek dari berbagai kelas. Di sinilah polimorfisme bisa sangat membantu. Kamu bisa menggunakan metode yang sama dari berbagai objek tanpa khawatir tipe kelas apa yang kamu gunakan.","Mari kita lihat contoh sederhana di mana kita punya dua kelas berbeda, yaitu Burung dan Ikan. Keduanya memiliki metode move, tetapi dengan implementasi yang berbeda.","Penjelasan:","Kelas Burung dan Ikan punya metode yang sama yaitu move(), tetapi dengan implementasi yang berbeda.","Kita membuat objek burung dan ikan, lalu memanggil metode move() untuk keduanya dalam satu loop tanpa khawatir dengan kelasnya.","Output:","Hebatnya polimorfisme di sini adalah kita bisa memperlakukan objek dari berbagai kelas dengan cara yang sama, meskipun mereka berperilaku berbeda."]},{"i":"polymorphism-dengan-inheritance-pewarisan","l":"Polymorphism dengan Inheritance (Pewarisan)","p":["Polimorfisme juga sering muncul bersama pewarisan. Kamu bisa membuat kelas anak yang mewarisi metode dari kelas induk, tapi kamu juga bisa mengubah (override) metode tersebut agar sesuai dengan kebutuhan kelas anak.","Mari kita ambil contoh tentang Hewan, di mana ada kelas Anjing dan Kucing yang mewarisi metode dari kelas induk.","Penjelasan:","Kelas Hewan adalah kelas induk yang punya metode suara().","Kelas Anjing dan Kucing mewarisi dari kelas Hewan, tetapi mereka mengubah (override) metode suara() untuk memberikan implementasi yang spesifik.","Ketika kita memanggil suara() dari objek hewan2 dan hewan3, mereka memberikan suara yang sesuai dengan masing-masing kelas.","Output:"]},{"l":"Polymorphism dengan Fungsi dan Objek","p":["Kita juga bisa membuat fungsi yang menerima objek apa saja dan menggunakan polimorfisme di dalamnya. Fungsi ini tidak peduli dari kelas mana objek berasal, yang penting objek tersebut memiliki metode yang dibutuhkan.","Contoh di bawah ini menggunakan fungsi beraksi() yang bisa bekerja dengan objek dari berbagai kelas.","Penjelasan:","Fungsi beraksi() menerima objek apa saja, asalkan objek tersebut memiliki metode aksi().","Ini adalah contoh polimorfisme dengan fungsi, di mana kita bisa menggunakan objek dari berbagai kelas selama mereka punya metode yang diperlukan.","Output:"]},{"l":"Kesimpulan","p":["Dengan Polymorphism, kita bisa membuat kode yang lebih fleksibel dan mudah digunakan. Kamu tidak perlu khawatir tentang tipe objek yang sedang kamu tangani, karena dengan polimorfisme, kamu bisa memanggil metode yang sama untuk objek yang berbeda, dan mereka akan berperilaku sesuai dengan definisi kelas masing-masing.","Manfaat Polymorphism:","Fleksibilitas: Fungsi atau metode yang sama dapat bekerja dengan berbagai objek.","Kemudahan Pemeliharaan: Kode jadi lebih mudah diperbarui karena kita tidak perlu menulis ulang logika untuk setiap tipe data atau kelas.","Reusability: Menghindari duplikasi kode karena metode yang sama bisa diterapkan pada objek yang berbeda."]}],[{"l":"Abstraction"},{"i":"apa-itu-abstraction","l":"Apa Itu Abstraction?","p":["Bayangkan kamu punya sebuah mobil. Saat kamu mengemudikan mobil, kamu menggunakan pedal gas, rem, dan kopling tanpa perlu tahu bagaimana masing-masing komponen di dalam mesin bekerja. Kamu hanya perlu tahu bagaimana menggunakan fitur-fitur tersebut untuk mengemudikan mobil dengan benar.","Dalam dunia pemrograman, Abstraksi bekerja dengan cara yang sama. Abstraksi menyembunyikan detail implementasi yang kompleks dan hanya menampilkan informasi atau fungsionalitas yang penting dan relevan untuk pengguna. Ini membantu kita fokus pada apa yang dilakukan suatu objek, tanpa perlu memikirkan bagaimana semua bagian di dalamnya bekerja."]},{"l":"Kegunaan Abstraksi","p":["Menyederhanakan Kode: Dengan menyembunyikan detail yang kompleks, abstraksi membantu membuat kode lebih sederhana dan lebih mudah dipahami.","Modularitas: Abstraksi memudahkan desain kode yang modular, sehingga bagian-bagian kode dapat dikembangkan, diuji, dan diperbaiki secara terpisah.","Penggunaan Kembali Kode: Dengan menyembunyikan detail implementasi, kode yang telah dibuat bisa digunakan kembali di tempat lain tanpa perlu perubahan.","Kolaborasi Pengembang: Memudahkan kolaborasi dengan menyederhanakan antarmuka yang digunakan untuk berinteraksi dengan kode."]},{"l":"Abstraction dalam Python","p":["Di Python, kita dapat menerapkan abstraksi menggunakan kelas abstrak. Kelas abstrak adalah kelas yang tidak dapat diinstansiasi langsung dan berisi metode abstrak, yaitu metode yang dideklarasikan tetapi tidak diimplementasikan di dalam kelas tersebut. Kelas ini berfungsi sebagai template untuk subkelas yang akan mengimplementasikan metode tersebut."]},{"l":"Langkah-Langkah Implementasi Abstraction","p":["Mendefinisikan Kelas Abstrak Kelas abstrak adalah kelas yang tidak dapat diinstansiasi secara langsung. Kelas ini mendefinisikan metode abstrak yang harus diimplementasikan oleh subkelas.","Mendefinisikan Metode Abstrak Metode abstrak dideklarasikan di dalam kelas abstrak dan tidak memiliki implementasi. Subkelas harus memberikan implementasi untuk metode ini.","Mengimplementasikan Subkelas Subkelas yang mewarisi kelas abstrak harus mengimplementasikan semua metode abstrak. Subkelas ini adalah kelas konkret yang dapat diinstansiasi dan digunakan."]},{"l":"Abstraction vs. Non-Abstraction","p":["Berikut adalah contoh kode untuk menunjukkan perbedaan antara abstraction(abstraksi) dan kelas tanpa abstraksi."]},{"l":"1. Kode dengan Abstraction","p":["Di dalam kode abstraksi, kita menggunakan kelas abstrak dengan metode abstrak. Kelas abstrak ini tidak dapat diinstansiasi langsung dan memaksa subkelas untuk mengimplementasikan metode abstrak tersebut.","Kode:","Penjelasan:","Kelas Kendaraan adalah kelas abstrak. Ia mendefinisikan metode bergerak() dan bahan_bakar(), tetapi tidak memiliki implementasi. Metode tersebut harus diimplementasikan oleh setiap subkelas.","Subkelas Mobil dan Sepeda adalah kelas konkret yang mengimplementasikan metode abstrak dari kelas induk.","Jika subkelas tidak mengimplementasikan metode abstrak, maka akan terjadi kesalahan."]},{"i":"2-kode-dengan-kelas-biasa-tanpa-abstraksi","l":"2. Kode dengan Kelas Biasa (Tanpa Abstraksi)","p":["Dalam kode kelas biasa, kita dapat membuat metode langsung dalam kelas induk, dan kita dapat menggunakannya langsung tanpa harus mengimplementasikan ulang di subkelas.","Kode:","Penjelasan:","Kelas Kendaraan adalah kelas biasa yang sudah memiliki implementasi dari metode bergerak() dan bahan_bakar(). Metode ini dapat digunakan langsung oleh subkelas.","Subkelas Mobil dan Sepeda dapat mengubah (override) metode dari kelas induk jika mereka butuh perilaku yang berbeda.","Subkelas tidak diwajibkan untuk mengimplementasikan metode jika mereka tidak di-override."]},{"i":"perbedaan-utama","l":"Perbedaan Utama:"},{"i":"1-kelas-abstrak","l":"1. Kelas Abstrak:","p":["Mengandung metode yang tidak memiliki implementasi, hanya dideklarasikan.","Subkelas diwajibkan mengimplementasikan metode abstrak.","Kelas abstrak tidak bisa diinstansiasi langsung.","Digunakan untuk memastikan setiap subkelas memiliki perilaku yang spesifik."]},{"i":"2-kelas-tanpa-abstraksi","l":"2. Kelas Tanpa Abstraksi:","p":["Mengandung metode dengan implementasi yang dapat digunakan langsung oleh subkelas.","Subkelas tidak diwajibkan untuk mengubah atau mengimplementasikan ulang metode dari kelas induk.","Kelas biasa dapat diinstansiasi langsung.","Digunakan ketika kita ingin memberikan perilaku dasar yang dapat digunakan langsung oleh subkelas.","Dengan menggunakan abstraksi, kita dapat menyembunyikan detail teknis yang tidak perlu diketahui oleh pengguna, dan hanya menampilkan fungsionalitas yang relevan. Ini membuat kode lebih bersih, lebih mudah dipahami, dan lebih mudah dirawat."]}],[{"l":"Contoh Kode Abstraction"}],[{"l":"Contoh Kode Encapsulation"}],[{"l":"Contoh Kode Inheritance"}],[{"l":"Contoh Kode Polymorphism"}],[{"i":"tugas-sistem-pengelolaan-akun-pengguna","l":"Tugas: Sistem Pengelolaan Akun Pengguna"},{"i":"tujuan-tugas","l":"Tujuan Tugas:","p":["Mahasiswa diharapkan dapat memahami dan mempraktikkan konsep inheritance, encapsulation, polymorphism, dan abstraction dalam pemrograman Python melalui implementasi sederhana sistem pengelolaan akun pengguna."]},{"i":"studi-kasus-pengelolaan-akun-pengguna","l":"Studi Kasus: Pengelolaan Akun Pengguna","p":["Bayangkan kamu bekerja sebagai pengembang perangkat lunak yang bertugas untuk membuat sistem sederhana untuk mengelola akun pengguna. Sistem ini harus bisa menangani dua jenis akun pengguna, yaitu Akun Standar dan Akun Premium. Setiap jenis akun memiliki hak akses dan fitur yang berbeda.","Setiap pengguna akan memiliki informasi seperti nama, email, dan status keanggotaan(standar atau premium). Pengguna juga memiliki metode untuk login, logout, dan melihat informasi mereka."]},{"i":"fitur-yang-harus-dimiliki-sistem","l":"Fitur yang Harus Dimiliki Sistem:"},{"i":"1-inheritance-pewarisan","l":"1. Inheritance (Pewarisan):","p":["Buat kelas induk UserAccount yang memiliki atribut umum seperti name, email, dan metode seperti login(), logout(), dan view_account().","Buat subkelas StandardAccount dan PremiumAccount yang mewarisi dari kelas UserAccount. Berikan perilaku yang unik, seperti akses fitur tambahan untuk akun premium."]},{"i":"2-encapsulation-enkapsulasi","l":"2. Encapsulation (Enkapsulasi):","p":["Atribut seperti email dan status keanggotaan harus dienkapsulasi (privat). Gunakan getter dan setter untuk mengakses dan memodifikasi data ini.","Validasi pada setter harus memastikan bahwa hanya status keanggotaan yang valid (standar/premium) yang dapat diterima."]},{"i":"3-polymorphism-polimorfisme","l":"3. Polymorphism (Polimorfisme):","p":["Implementasikan polimorfisme pada metode view_account() agar akun standar dan premium dapat menampilkan informasi dengan cara yang berbeda.","Misalnya, StandardAccount hanya dapat melihat informasi dasar, sementara PremiumAccount dapat melihat informasi tambahan seperti tanggal berakhirnya keanggotaan."]},{"i":"4-abstraction-abstraksi","l":"4. Abstraction (Abstraksi):","p":["Definisikan metode abstrak access_features() di kelas induk UserAccount. Setiap subkelas harus mengimplementasikan metode ini dengan fitur yang sesuai, seperti fitur dasar untuk akun standar dan fitur premium untuk akun premium."]},{"i":"langkah-langkah-yang-dapat-dilakukan","l":"Langkah-Langkah yang Dapat Dilakukan:"},{"l":"1. Membuat Kelas Induk UserAccount","p":["Buat kelas abstrak bernama UserAccount yang memiliki atribut umum seperti name dan email, serta metode seperti login(), logout(), dan view_account()."]},{"l":"2. Mengembangkan Subkelas StandardAccount dan PremiumAccount","p":["Mewarisi kelas induk dan implementasikan metode khusus untuk setiap akun pengguna. Gunakan polimorfisme pada metode seperti view_account()."]},{"l":"3. Menerapkan Enkapsulasi dengan Getter dan Setter","p":["Buat getter dan setter untuk atribut privat email dan status keanggotaan. Tambahkan validasi input dalam setter."]},{"l":"4. Membuat Simulasi Penggunaan Akun","p":["Simulasikan pengoperasian sistem akun dengan menggunakan getter dan setter untuk menampilkan serta mengubah informasi pengguna."]},{"l":"Catatan","p":["Kalian tidak perlu menggunakan input dari pengguna. Cukup buat objek akun pengguna secara manual dan panggil metode yang sesuai untuk menampilkan informasi."]},{"i":"contoh-output-tidak-harus-sama","l":"Contoh Output (Tidak Harus Sama):"},{"l":"Laporan","p":["Buat laporan singkat yang menjelaskan bagaimana kalian menerapkan setiap konsep OOP (inheritance, encapsulation, polymorphism, dan abstraction). Laporan maksimal 2 halaman dalam format PDF."]},{"l":"Pengumpulan"},{"l":"Deadline","p":["Kumpulkan tugas kalian ke dalam Google Classroom paling lambat Senin, 30 September 2024 pukul 21.00 WIB."]},{"i":"nama-file","l":"Nama File:","p":["TugasAkun_NIM_Nama.py TugasAkun_NIM_Nama.pdf","Selamat mengerjakan, dan jangan ragu untuk bertanya jika ada yang kurang jelas. Tetap semangat! \uD83D\uDE80"]}]]